{
    "swagger": "2.0",
    "info": {
        "title": "DTI Issuer API",
        "version": "1.0"
    },
    "host": "ws.dev.issuer-admin.diti.di.gov.on.ca",
    "basePath": "/acapy",
    "schemes": [
        "https"
    ],
    "securityDefinitions": {
        "Authorization": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "Wallet-Token": {
            "type": "apiKey",
            "name": "Wallet-Token",
            "in": "header"
        }
    },
    "security": [
        {
            "Authorization":[],
            "Wallet-Token": []
        }
    ],
    "paths": {
        "/connections": {
            "get": {
                "description": "Query agent-to-agent connections",
                "operationId": "get-connections",
                "summary": "Query agent-to-agent connections",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "alias",
                        "in": "query",
                        "description": "Alias",
                        "type": "string"
                    },
                    {
                        "name": "connection_protocol",
                        "in": "query",
                        "description": "Connection protocol used",
                        "type": "string",
                        "enum": [
                            "connections/1.0",
                            "didexchange/1.0"
                        ]
                    },
                    {
                        "name": "invitation_key",
                        "in": "query",
                        "description": "invitation key",
                        "type": "string",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                    },
                    {
                        "name": "my_did",
                        "in": "query",
                        "description": "My DID",
                        "type": "string",
                        "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Connection state",
                        "type": "string",
                        "enum": [
                            "start",
                            "abandoned",
                            "active",
                            "completed",
                            "response",
                            "init",
                            "invitation",
                            "error",
                            "request"
                        ]
                    },
                    {
                        "name": "their_did",
                        "in": "query",
                        "description": "Their DID",
                        "type": "string",
                        "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                    },
                    {
                        "name": "their_role",
                        "in": "query",
                        "description": "Their role in the connection protocol",
                        "type": "string",
                        "enum": [
                            "invitee",
                            "requester",
                            "inviter",
                            "responder"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnectionList"
                        },
                        "examples": {
                            "application/json": {
                                "results": [
                                    {
                                        "accept": "auto",
                                        "alias": "Bob, providing quotes",
                                        "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "connection_protocol": "connections/1.0",
                                        "created_at": "2021-12-31 23:59:59Z",
                                        "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                        "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                        "invitation_mode": "once",
                                        "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "my_did": "WgWxqztrNooG92RXvxSTWv",
                                        "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "rfc23_state": "invitation-sent",
                                        "routing_state": "active",
                                        "state": "active",
                                        "their_did": "WgWxqztrNooG92RXvxSTWv",
                                        "their_label": "Bob",
                                        "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                        "their_role": "requester",
                                        "updated_at": "2021-12-31 23:59:59Z"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/connections/create-invitation": {
            "post": {
                "description": "Create a new connection invitation",
                "operationId": "post-connections-create-invitation",
                "summary": "Create a new connection invitation",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "alias",
                        "in": "query",
                        "description": "Alias",
                        "type": "string"
                    },
                    {
                        "name": "auto_accept",
                        "in": "query",
                        "description": "Auto-accept connection (defaults to configuration)",
                        "type": "boolean"
                    },
                    {
                        "name": "multi_use",
                        "in": "query",
                        "description": "Create invitation for multiple use (default false)",
                        "type": "boolean"
                    },
                    {
                        "name": "public",
                        "in": "query",
                        "description": "Create invitation from public DID (default false)",
                        "type": "boolean"
                    },
                    {
                        "name": "createInvitationRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CreateInvitationRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/InvitationResult"
                        },
                        "examples": {
                            "application/json": {
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation": {
                                    "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                                    "did": "WgWxqztrNooG92RXvxSTWv",
                                    "imageUrl": "http://192.168.56.101/img/logo.jpg",
                                    "label": "Bob",
                                    "recipientKeys": [
                                        "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                                    ],
                                    "routingKeys": [
                                        "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                                    ],
                                    "serviceEndpoint": "http://192.168.56.101:8020"
                                },
                                "invitation_url": "http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ=="
                            }
                        }
                    }
                }
            }
        },
        "/connections/create-static": {
            "post": {
                "description": "Create a new static connection",
                "operationId": "post-connections-create-static",
                "summary": "Create a new static connection",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "connectionStaticRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ConnectionStaticRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnectionStaticResult"
                        },
                        "examples": {
                            "application/json": {
                                "mv_verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "my_endpoint": "https://myhost:8021",
                                "record": {
                                    "accept": "auto",
                                    "alias": "Bob, providing quotes",
                                    "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "connection_protocol": "connections/1.0",
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                    "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                    "invitation_mode": "once",
                                    "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "my_did": "WgWxqztrNooG92RXvxSTWv",
                                    "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "rfc23_state": "invitation-sent",
                                    "routing_state": "active",
                                    "state": "active",
                                    "their_did": "WgWxqztrNooG92RXvxSTWv",
                                    "their_label": "Bob",
                                    "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                    "their_role": "requester",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                },
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                            }
                        }
                    }
                }
            }
        },
        "/connections/receive-invitation": {
            "post": {
                "description": "Receive a new connection invitation",
                "operationId": "post-connections-receive-invitation",
                "summary": "Receive a new connection invitation",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "alias",
                        "in": "query",
                        "description": "Alias",
                        "type": "string"
                    },
                    {
                        "name": "auto_accept",
                        "in": "query",
                        "description": "Auto-accept connection (defaults to configuration)",
                        "type": "boolean"
                    },
                    {
                        "name": "mediation_id",
                        "in": "query",
                        "description": "Identifier for active mediation record to be used",
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "receiveInvitationRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ReceiveInvitationRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnRecord"
                        },
                        "examples": {
                            "application/json": {
                                "accept": "auto",
                                "alias": "Bob, providing quotes",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "connection_protocol": "connections/1.0",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "invitation_mode": "once",
                                "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rfc23_state": "invitation-sent",
                                "routing_state": "active",
                                "state": "active",
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_label": "Bob",
                                "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                "their_role": "requester",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/connections/{conn_id}": {
            "get": {
                "description": "Fetch a single connection record",
                "operationId": "get-connections-conn_id",
                "summary": "Fetch a single connection record",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnRecord"
                        },
                        "examples": {
                            "application/json": {
                                "accept": "auto",
                                "alias": "Bob, providing quotes",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "connection_protocol": "connections/1.0",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "invitation_mode": "once",
                                "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rfc23_state": "invitation-sent",
                                "routing_state": "active",
                                "state": "active",
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_label": "Bob",
                                "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                "their_role": "requester",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an existing connection record",
                "operationId": "delete-connections-conn_id",
                "summary": "Remove an existing connection record",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnectionModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/connections/{conn_id}/accept-invitation": {
            "post": {
                "description": "Accept a stored connection invitation",
                "operationId": "post-connections-conn_id-accept-invitation",
                "summary": "Accept a stored connection invitation",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "mediation_id",
                        "in": "query",
                        "description": "Identifier for active mediation record to be used",
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "my_endpoint",
                        "in": "query",
                        "description": "My URL endpoint",
                        "type": "string",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                    },
                    {
                        "name": "my_label",
                        "in": "query",
                        "description": "Label for connection",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnRecord"
                        },
                        "examples": {
                            "application/json": {
                                "accept": "auto",
                                "alias": "Bob, providing quotes",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "connection_protocol": "connections/1.0",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "invitation_mode": "once",
                                "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rfc23_state": "invitation-sent",
                                "routing_state": "active",
                                "state": "active",
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_label": "Bob",
                                "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                "their_role": "requester",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/connections/{conn_id}/accept-request": {
            "post": {
                "description": "Accept a stored connection request",
                "operationId": "post-connections-conn_id-accept-request",
                "summary": "Accept a stored connection request",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "my_endpoint",
                        "in": "query",
                        "description": "My URL endpoint",
                        "type": "string",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnRecord"
                        },
                        "examples": {
                            "application/json": {
                                "accept": "auto",
                                "alias": "Bob, providing quotes",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "connection_protocol": "connections/1.0",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "invitation_mode": "once",
                                "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rfc23_state": "invitation-sent",
                                "routing_state": "active",
                                "state": "active",
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_label": "Bob",
                                "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                "their_role": "requester",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/connections/{conn_id}/endpoints": {
            "get": {
                "description": "Fetch connection remote endpoint",
                "operationId": "get-connections-conn_id-endpoints",
                "summary": "Fetch connection remote endpoint",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EndpointsResult"
                        },
                        "examples": {
                            "application/json": {
                                "my_endpoint": "https://myhost:8021",
                                "their_endpoint": "https://myhost:8021"
                            }
                        }
                    }
                }
            }
        },
        "/connections/{conn_id}/establish-inbound/{ref_id}": {
            "post": {
                "description": "Assign another connection as the inbound connection",
                "operationId": "post-connections-conn_id-establish-inbound-ref_id",
                "summary": "Assign another connection as the inbound connection",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ref_id",
                        "in": "path",
                        "description": "Inbound connection identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnectionModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/connections/{conn_id}/metadata": {
            "get": {
                "description": "Fetch connection metadata",
                "operationId": "get-connections-conn_id-metadata",
                "summary": "Fetch connection metadata",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "description": "Key to retrieve.",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnectionMetadata"
                        },
                        "examples": {
                            "application/json": {
                                "results": {}
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Set connection metadata",
                "operationId": "post-connections-conn_id-metadata",
                "summary": "Set connection metadata",
                "tags": [
                    "connection"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "connectionMetadataSetRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ConnectionMetadataSetRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnectionMetadata"
                        },
                        "examples": {
                            "application/json": {
                                "results": {}
                            }
                        }
                    }
                }
            }
        },
        "/connections/{conn_id}/send-message": {
            "post": {
                "description": "Send a basic message to a connection",
                "operationId": "post-connections-conn_id-send-message",
                "summary": "Send a basic message to a connection",
                "tags": [
                    "basicmessage"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sendMessage",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SendMessage"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/BasicMessageModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/connections/{conn_id}/send-ping": {
            "post": {
                "description": "Send a trust ping to a connection",
                "operationId": "post-connections-conn_id-send-ping",
                "summary": "Send a trust ping to a connection",
                "tags": [
                    "trustping"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "pingRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PingRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/PingRequestResponse"
                        },
                        "examples": {
                            "application/json": {
                                "thread_id": "string"
                            }
                        }
                    }
                }
            }
        },
        "/credential-definitions": {
            "post": {
                "description": "Sends a credential definition to the ledger",
                "operationId": "post-credential-definitions",
                "summary": "Sends a credential definition to the ledger",
                "tags": [
                    "credential-definition"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "query",
                        "description": "Connection identifier",
                        "type": "string"
                    },
                    {
                        "name": "create_transaction_for_endorser",
                        "in": "query",
                        "description": "Create Transaction For Endorser's signature",
                        "type": "boolean"
                    },
                    {
                        "name": "credentialDefinitionSendRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CredentialDefinitionSendRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/TxnOrCredentialDefinitionSendResult"
                        },
                        "examples": {
                            "application/json": {
                                "sent": {
                                    "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                                },
                                "txn": {}
                            }
                        }
                    }
                }
            }
        },
        "/credential-definitions/created": {
            "get": {
                "description": "Search for matching credential definitions that agent originated",
                "operationId": "get-credential-definitions-created",
                "summary": "Search for matching credential definitions that agent originated",
                "tags": [
                    "credential-definition"
                ],
                "parameters": [
                    {
                        "name": "cred_def_id",
                        "in": "query",
                        "description": "Credential definition id",
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                    },
                    {
                        "name": "issuer_did",
                        "in": "query",
                        "description": "Issuer DID",
                        "type": "string",
                        "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                    },
                    {
                        "name": "schema_id",
                        "in": "query",
                        "description": "Schema identifier",
                        "type": "string",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                    },
                    {
                        "name": "schema_issuer_did",
                        "in": "query",
                        "description": "Schema issuer DID",
                        "type": "string",
                        "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                    },
                    {
                        "name": "schema_name",
                        "in": "query",
                        "description": "Schema name",
                        "type": "string"
                    },
                    {
                        "name": "schema_version",
                        "in": "query",
                        "description": "Schema version",
                        "type": "string",
                        "pattern": "^[0-9.]+$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CredentialDefinitionsCreatedResult"
                        },
                        "examples": {
                            "application/json": {
                                "credential_definition_ids": [
                                    "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/credential-definitions/{cred_def_id}": {
            "get": {
                "description": "Gets a credential definition from the ledger",
                "operationId": "get-credential-definitions-cred_def_id",
                "summary": "Gets a credential definition from the ledger",
                "tags": [
                    "credential-definition"
                ],
                "parameters": [
                    {
                        "name": "cred_def_id",
                        "in": "path",
                        "description": "Credential definition identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CredentialDefinitionGetResult"
                        },
                        "examples": {
                            "application/json": {
                                "credential_definition": {
                                    "id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                    "schemaId": "20",
                                    "tag": "tag",
                                    "type": "CL",
                                    "value": {},
                                    "ver": "1.0"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/credential-definitions/{cred_def_id}/write_record": {
            "post": {
                "description": "Writes a credential definition non-secret record to the wallet",
                "operationId": "post-credential-definitions-cred_def_id-write_record",
                "summary": "Writes a credential definition non-secret record to the wallet",
                "tags": [
                    "credential-definition"
                ],
                "parameters": [
                    {
                        "name": "cred_def_id",
                        "in": "path",
                        "description": "Credential definition identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CredentialDefinitionGetResult"
                        },
                        "examples": {
                            "application/json": {
                                "credential_definition": {
                                    "id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                    "schemaId": "20",
                                    "tag": "tag",
                                    "type": "CL",
                                    "value": {},
                                    "ver": "1.0"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/credential/mime-types/{credential_id}": {
            "get": {
                "description": "Get attribute MIME types from wallet",
                "operationId": "get-credential-mime-types-credential_id",
                "summary": "Get attribute MIME types from wallet",
                "tags": [
                    "credentials"
                ],
                "parameters": [
                    {
                        "name": "credential_id",
                        "in": "path",
                        "description": "Credential identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AttributeMimeTypesResult"
                        },
                        "examples": {
                            "application/json": {
                                "results": {}
                            }
                        }
                    }
                }
            }
        },
        "/credential/revoked/{credential_id}": {
            "get": {
                "description": "Query credential revocation status by id",
                "operationId": "get-credential-revoked-credential_id",
                "summary": "Query credential revocation status by id",
                "tags": [
                    "credentials"
                ],
                "parameters": [
                    {
                        "name": "credential_id",
                        "in": "path",
                        "description": "Credential identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Earliest epoch of revocation status interval of interest",
                        "type": "string",
                        "pattern": "^[0-9]*$"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Latest epoch of revocation status interval of interest",
                        "type": "string",
                        "pattern": "^[0-9]*$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CredRevokedResult"
                        },
                        "examples": {
                            "application/json": {
                                "revoked": true
                            }
                        }
                    }
                }
            }
        },
        "/credential/w3c/{credential_id}": {
            "get": {
                "description": "Fetch W3C credential from wallet by id",
                "operationId": "get-credential-w3c-credential_id",
                "summary": "Fetch W3C credential from wallet by id",
                "tags": [
                    "credentials"
                ],
                "parameters": [
                    {
                        "name": "credential_id",
                        "in": "path",
                        "description": "Credential identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VCRecord"
                        },
                        "examples": {
                            "application/json": {
                                "contexts": [
                                    "https://myhost:8021"
                                ],
                                "cred_tags": {},
                                "cred_value": {},
                                "expanded_types": [
                                    "https://w3id.org/citizenship#PermanentResidentCard"
                                ],
                                "given_id": "http://example.edu/credentials/3732",
                                "issuer_id": "https://example.edu/issuers/14",
                                "proof_types": [
                                    "Ed25519Signature2018"
                                ],
                                "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "schema_ids": [
                                    "https://example.org/examples/degree.json"
                                ],
                                "subject_ids": [
                                    "did:example:ebfeb1f712ebc6f1c276e12ec21"
                                ]
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove W3C credential from wallet by id",
                "operationId": "delete-credential-w3c-credential_id",
                "summary": "Remove W3C credential from wallet by id",
                "tags": [
                    "credentials"
                ],
                "parameters": [
                    {
                        "name": "credential_id",
                        "in": "path",
                        "description": "Credential identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/HolderModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/credential/{credential_id}": {
            "get": {
                "description": "Fetch credential from wallet by id",
                "operationId": "get-credential-credential_id",
                "summary": "Fetch credential from wallet by id",
                "tags": [
                    "credentials"
                ],
                "parameters": [
                    {
                        "name": "credential_id",
                        "in": "path",
                        "description": "Credential identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/IndyCredInfo"
                        },
                        "examples": {
                            "application/json": {
                                "attrs": {},
                                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "cred_rev_id": "12345",
                                "referent": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove credential from wallet by id",
                "operationId": "delete-credential-credential_id",
                "summary": "Remove credential from wallet by id",
                "tags": [
                    "credentials"
                ],
                "parameters": [
                    {
                        "name": "credential_id",
                        "in": "path",
                        "description": "Credential identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/HolderModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/credentials": {
            "get": {
                "description": "Fetch credentials from wallet",
                "operationId": "get-credentials",
                "summary": "Fetch credentials from wallet",
                "tags": [
                    "credentials"
                ],
                "parameters": [
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Maximum number to retrieve",
                        "type": "string",
                        "pattern": "^[1-9][0-9]*$"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start index",
                        "type": "string",
                        "pattern": "^[0-9]*$"
                    },
                    {
                        "name": "wql",
                        "in": "query",
                        "description": "(JSON) WQL query",
                        "type": "string",
                        "pattern": "^{.*}$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CredInfoList"
                        },
                        "examples": {
                            "application/json": {
                                "results": [
                                    {
                                        "attrs": {},
                                        "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                        "cred_rev_id": "12345",
                                        "referent": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                        "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/credentials/w3c": {
            "post": {
                "description": "Fetch W3C credentials from wallet",
                "operationId": "post-credentials-w3c",
                "summary": "Fetch W3C credentials from wallet",
                "tags": [
                    "credentials"
                ],
                "parameters": [
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Maximum number to retrieve",
                        "type": "string",
                        "pattern": "^[1-9][0-9]*$"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start index",
                        "type": "string",
                        "pattern": "^[0-9]*$"
                    },
                    {
                        "name": "wql",
                        "in": "query",
                        "description": "(JSON) WQL query",
                        "type": "string",
                        "pattern": "^{.*}$"
                    },
                    {
                        "name": "w3CCredentialsListRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/W3CCredentialsListRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VCRecordList"
                        },
                        "examples": {
                            "application/json": {
                                "results": [
                                    {
                                        "contexts": [
                                            "https://myhost:8021"
                                        ],
                                        "cred_tags": {},
                                        "cred_value": {},
                                        "expanded_types": [
                                            "https://w3id.org/citizenship#PermanentResidentCard"
                                        ],
                                        "given_id": "http://example.edu/credentials/3732",
                                        "issuer_id": "https://example.edu/issuers/14",
                                        "proof_types": [
                                            "Ed25519Signature2018"
                                        ],
                                        "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "schema_ids": [
                                            "https://example.org/examples/degree.json"
                                        ],
                                        "subject_ids": [
                                            "did:example:ebfeb1f712ebc6f1c276e12ec21"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/didexchange/create-request": {
            "post": {
                "description": "Create and send a request against public DID's implicit invitation",
                "operationId": "post-didexchange-create-request-their_public_did-their_public_did",
                "summary": "Create and send a request against public DID's implicit invitation",
                "tags": [
                    "did-exchange"
                ],
                "parameters": [
                    {
                        "name": "their_public_did",
                        "in": "query",
                        "description": "Qualified public DID to which to request connection",
                        "required": true,
                        "type": "string",
                        "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$"
                    },
                    {
                        "name": "mediation_id",
                        "in": "query",
                        "description": "Identifier for active mediation record to be used",
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "my_endpoint",
                        "in": "query",
                        "description": "My URL endpoint",
                        "type": "string",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                    },
                    {
                        "name": "my_label",
                        "in": "query",
                        "description": "Label for connection request",
                        "type": "string"
                    },
                    {
                        "name": "use_public_did",
                        "in": "query",
                        "description": "Use public DID for this connection",
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnRecord"
                        },
                        "examples": {
                            "application/json": {
                                "accept": "auto",
                                "alias": "Bob, providing quotes",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "connection_protocol": "connections/1.0",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "invitation_mode": "once",
                                "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rfc23_state": "invitation-sent",
                                "routing_state": "active",
                                "state": "active",
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_label": "Bob",
                                "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                "their_role": "requester",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/didexchange/receive-request": {
            "post": {
                "description": "Receive request against public DID's implicit invitation",
                "operationId": "post-didexchange-receive-request",
                "summary": "Receive request against public DID's implicit invitation",
                "tags": [
                    "did-exchange"
                ],
                "parameters": [
                    {
                        "name": "alias",
                        "in": "query",
                        "description": "Alias for connection",
                        "type": "string"
                    },
                    {
                        "name": "auto_accept",
                        "in": "query",
                        "description": "Auto-accept connection (defaults to configuration)",
                        "type": "boolean"
                    },
                    {
                        "name": "mediation_id",
                        "in": "query",
                        "description": "Identifier for active mediation record to be used",
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "my_endpoint",
                        "in": "query",
                        "description": "My URL endpoint",
                        "type": "string",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                    },
                    {
                        "name": "dIDXRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DIDXRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnRecord"
                        },
                        "examples": {
                            "application/json": {
                                "accept": "auto",
                                "alias": "Bob, providing quotes",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "connection_protocol": "connections/1.0",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "invitation_mode": "once",
                                "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rfc23_state": "invitation-sent",
                                "routing_state": "active",
                                "state": "active",
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_label": "Bob",
                                "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                "their_role": "requester",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/didexchange/{conn_id}/accept-invitation": {
            "post": {
                "description": "Accept a stored connection invitation",
                "operationId": "post-didexchange-conn_id-accept-invitation",
                "summary": "Accept a stored connection invitation",
                "tags": [
                    "did-exchange"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "my_endpoint",
                        "in": "query",
                        "description": "My URL endpoint",
                        "type": "string",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                    },
                    {
                        "name": "my_label",
                        "in": "query",
                        "description": "Label for connection request",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnRecord"
                        },
                        "examples": {
                            "application/json": {
                                "accept": "auto",
                                "alias": "Bob, providing quotes",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "connection_protocol": "connections/1.0",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "invitation_mode": "once",
                                "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rfc23_state": "invitation-sent",
                                "routing_state": "active",
                                "state": "active",
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_label": "Bob",
                                "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                "their_role": "requester",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/didexchange/{conn_id}/accept-request": {
            "post": {
                "description": "Accept a stored connection request",
                "operationId": "post-didexchange-conn_id-accept-request",
                "summary": "Accept a stored connection request",
                "tags": [
                    "did-exchange"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "mediation_id",
                        "in": "query",
                        "description": "Identifier for active mediation record to be used",
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "my_endpoint",
                        "in": "query",
                        "description": "My URL endpoint",
                        "type": "string",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnRecord"
                        },
                        "examples": {
                            "application/json": {
                                "accept": "auto",
                                "alias": "Bob, providing quotes",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "connection_protocol": "connections/1.0",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "invitation_mode": "once",
                                "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rfc23_state": "invitation-sent",
                                "routing_state": "active",
                                "state": "active",
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_label": "Bob",
                                "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                "their_role": "requester",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/create": {
            "post": {
                "description": "Create credential from attribute values",
                "operationId": "post-issue-credential-2-0-create",
                "summary": "Create credential from attribute values",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "v20IssueCredSchemaCore",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20IssueCredSchemaCore"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "cred_issue": {},
                                "cred_offer": {},
                                "cred_preview": {},
                                "cred_proposal": {},
                                "cred_request": {},
                                "error_msg": "The front fell off",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "role": "issuer",
                                "state": "done",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/create-offer": {
            "post": {
                "description": "Create a credential offer, independent of any proposal or connection",
                "operationId": "post-issue-credential-2-0-create-offer",
                "summary": "Create a credential offer, independent of any proposal or connection",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "v20CredOfferConnFreeRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredOfferConnFreeRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "cred_issue": {},
                                "cred_offer": {},
                                "cred_preview": {},
                                "cred_proposal": {},
                                "cred_request": {},
                                "error_msg": "The front fell off",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "role": "issuer",
                                "state": "done",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/records": {
            "get": {
                "description": "Fetch all credential exchange records",
                "operationId": "get-issue-credential-2-0-records",
                "summary": "Fetch all credential exchange records",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "connection_id",
                        "in": "query",
                        "description": "Format - uuid. Connection identifier",
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Role assigned in credential exchange",
                        "type": "string",
                        "enum": [
                            "issuer",
                            "holder"
                        ]
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Credential exchange state",
                        "type": "string",
                        "enum": [
                            "proposal-sent",
                            "proposal-received",
                            "offer-sent",
                            "offer-received",
                            "request-sent",
                            "request-received",
                            "credential-issued",
                            "credential-received",
                            "done"
                        ]
                    },
                    {
                        "name": "thread_id",
                        "in": "query",
                        "description": "Format - uuid. Thread identifier",
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecordListResult"
                        },
                        "examples": {
                            "application/json": {
                                "results": [
                                    {
                                        "cred_ex_record": {},
                                        "indy": {
                                            "created_at": "2021-12-31 23:59:59Z",
                                            "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                            "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                            "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                            "cred_request_metadata": {},
                                            "cred_rev_id": "12345",
                                            "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                            "state": "active",
                                            "updated_at": "2021-12-31 23:59:59Z"
                                        },
                                        "ld_proof": {
                                            "created_at": "2021-12-31 23:59:59Z",
                                            "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                            "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                            "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                            "state": "active",
                                            "updated_at": "2021-12-31 23:59:59Z"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/records/{cred_ex_id}": {
            "get": {
                "description": "Fetch a single credential exchange record",
                "operationId": "get-issue-credential-2-0-records-cred_ex_id",
                "summary": "Fetch a single credential exchange record",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecordDetail"
                        },
                        "examples": {
                            "application/json": {
                                "cred_ex_record": {},
                                "indy": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_request_metadata": {},
                                    "cred_rev_id": "12345",
                                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "active",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                },
                                "ld_proof": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "state": "active",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an existing credential exchange record",
                "operationId": "delete-issue-credential-2-0-records-cred_ex_id",
                "summary": "Remove an existing credential exchange record",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20IssueCredentialModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/records/{cred_ex_id}/issue": {
            "post": {
                "description": "Send holder a credential",
                "operationId": "post-issue-credential-2-0-records-cred_ex_id-issue",
                "summary": "Send holder a credential",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v20CredIssueRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredIssueRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecordDetail"
                        },
                        "examples": {
                            "application/json": {
                                "cred_ex_record": {},
                                "indy": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_request_metadata": {},
                                    "cred_rev_id": "12345",
                                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "active",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                },
                                "ld_proof": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "state": "active",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/records/{cred_ex_id}/problem-report": {
            "post": {
                "description": "Send a problem report for credential exchange",
                "operationId": "post-issue-credential-2-0-records-cred_ex_id-problem-report",
                "summary": "Send a problem report for credential exchange",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v20CredIssueProblemReportRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredIssueProblemReportRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20IssueCredentialModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/records/{cred_ex_id}/send-offer": {
            "post": {
                "description": "Send holder a credential offer in reference to a proposal with preview",
                "operationId": "post-issue-credential-2-0-records-cred_ex_id-send-offer",
                "summary": "Send holder a credential offer in reference to a proposal with preview",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v20CredBoundOfferRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredBoundOfferRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "cred_issue": {},
                                "cred_offer": {},
                                "cred_preview": {},
                                "cred_proposal": {},
                                "cred_request": {},
                                "error_msg": "The front fell off",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "role": "issuer",
                                "state": "done",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/records/{cred_ex_id}/send-request": {
            "post": {
                "description": "Send issuer a credential request",
                "operationId": "post-issue-credential-2-0-records-cred_ex_id-send-request",
                "summary": "Send issuer a credential request",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v20CredRequestRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredRequestRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "cred_issue": {},
                                "cred_offer": {},
                                "cred_preview": {},
                                "cred_proposal": {},
                                "cred_request": {},
                                "error_msg": "The front fell off",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "role": "issuer",
                                "state": "done",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/records/{cred_ex_id}/store": {
            "post": {
                "description": "Store a received credential",
                "operationId": "post-issue-credential-2-0-records-cred_ex_id-store",
                "summary": "Store a received credential",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v20CredStoreRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredStoreRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecordDetail"
                        },
                        "examples": {
                            "application/json": {
                                "cred_ex_record": {},
                                "indy": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_request_metadata": {},
                                    "cred_rev_id": "12345",
                                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "active",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                },
                                "ld_proof": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "state": "active",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/send": {
            "post": {
                "description": "Send holder a credential, automating entire flow",
                "operationId": "post-issue-credential-2-0-send",
                "summary": "Send holder a credential, automating entire flow",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "v20CredExFree",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredExFree"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "cred_issue": {},
                                "cred_offer": {},
                                "cred_preview": {},
                                "cred_proposal": {},
                                "cred_request": {},
                                "error_msg": "The front fell off",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "role": "issuer",
                                "state": "done",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/send-offer": {
            "post": {
                "description": "Send holder a credential offer, independent of any proposal",
                "operationId": "post-issue-credential-2-0-send-offer",
                "summary": "Send holder a credential offer, independent of any proposal",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "v20CredOfferRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredOfferRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "cred_issue": {},
                                "cred_offer": {},
                                "cred_preview": {},
                                "cred_proposal": {},
                                "cred_request": {},
                                "error_msg": "The front fell off",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "role": "issuer",
                                "state": "done",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/send-proposal": {
            "post": {
                "description": "Send issuer a credential proposal",
                "operationId": "post-issue-credential-2-0-send-proposal",
                "summary": "Send issuer a credential proposal",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "v20CredExFree",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredExFree"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "cred_issue": {},
                                "cred_offer": {},
                                "cred_preview": {},
                                "cred_proposal": {},
                                "cred_request": {},
                                "error_msg": "The front fell off",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "role": "issuer",
                                "state": "done",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential-2.0/send-request": {
            "post": {
                "description": "Send issuer a credential request not bound to an existing thread. Indy credentials cannot start at a request",
                "operationId": "post-issue-credential-2-0-send-request",
                "summary": "Send issuer a credential request not bound to an existing thread. Indy credentials cannot start at a request",
                "tags": [
                    "issue-credential v2.0"
                ],
                "parameters": [
                    {
                        "name": "v20CredRequestFree",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20CredRequestFree"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20CredExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "cred_issue": {},
                                "cred_offer": {},
                                "cred_preview": {},
                                "cred_proposal": {},
                                "cred_request": {},
                                "error_msg": "The front fell off",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "role": "issuer",
                                "state": "done",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/create": {
            "post": {
                "description": "Send holder a credential, automating entire flow",
                "operationId": "post-issue-credential-create",
                "summary": "Send holder a credential, automating entire flow",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "v10CredentialCreate",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialCreate"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/create-offer": {
            "post": {
                "description": "Create a credential offer, independent of any proposal or connection",
                "operationId": "post-issue-credential-create-offer",
                "summary": "Create a credential offer, independent of any proposal or connection",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "v10CredentialConnFreeOfferRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialConnFreeOfferRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/records": {
            "get": {
                "description": "Fetch all credential exchange records",
                "operationId": "get-issue-credential-records",
                "summary": "Fetch all credential exchange records",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "connection_id",
                        "in": "query",
                        "description": "Format - uuid. Connection identifier",
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Role assigned in credential exchange",
                        "type": "string",
                        "enum": [
                            "issuer",
                            "holder"
                        ]
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Credential exchange state",
                        "type": "string",
                        "enum": [
                            "proposal_sent",
                            "proposal_received",
                            "offer_sent",
                            "offer_received",
                            "request_sent",
                            "request_received",
                            "credential_issued",
                            "credential_received",
                            "credential_acked"
                        ]
                    },
                    {
                        "name": "thread_id",
                        "in": "query",
                        "description": "Format - uuid. Thread identifier",
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchangeListResult"
                        },
                        "examples": {
                            "application/json": {
                                "results": [
                                    {
                                        "auto_issue": false,
                                        "auto_offer": false,
                                        "auto_remove": false,
                                        "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "created_at": "2021-12-31 23:59:59Z",
                                        "credential": {},
                                        "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                        "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "credential_offer": {},
                                        "credential_offer_dict": {},
                                        "credential_proposal_dict": {},
                                        "credential_request": {},
                                        "credential_request_metadata": {},
                                        "error_msg": "Credential definition identifier is not set in proposal",
                                        "initiator": "self",
                                        "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "raw_credential": {},
                                        "revoc_reg_id": "string",
                                        "revocation_id": "string",
                                        "role": "issuer",
                                        "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                        "state": "credential_acked",
                                        "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "trace": true,
                                        "updated_at": "2021-12-31 23:59:59Z"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/records/{cred_ex_id}": {
            "get": {
                "description": "Fetch a single credential exchange record",
                "operationId": "get-issue-credential-records-cred_ex_id",
                "summary": "Fetch a single credential exchange record",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an existing credential exchange record",
                "operationId": "delete-issue-credential-records-cred_ex_id",
                "summary": "Remove an existing credential exchange record",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/IssueCredentialModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/issue-credential/records/{cred_ex_id}/issue": {
            "post": {
                "description": "Send holder a credential",
                "operationId": "post-issue-credential-records-cred_ex_id-issue",
                "summary": "Send holder a credential",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v10CredentialIssueRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialIssueRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/records/{cred_ex_id}/problem-report": {
            "post": {
                "description": "Send a problem report for credential exchange",
                "operationId": "post-issue-credential-records-cred_ex_id-problem-report",
                "summary": "Send a problem report for credential exchange",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v10CredentialProblemReportRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialProblemReportRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/IssueCredentialModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/issue-credential/records/{cred_ex_id}/send-offer": {
            "post": {
                "description": "Send holder a credential offer in reference to a proposal with preview",
                "operationId": "post-issue-credential-records-cred_ex_id-send-offer",
                "summary": "Send holder a credential offer in reference to a proposal with preview",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v10CredentialBoundOfferRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialBoundOfferRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/records/{cred_ex_id}/send-request": {
            "post": {
                "description": "Send issuer a credential request",
                "operationId": "post-issue-credential-records-cred_ex_id-send-request",
                "summary": "Send issuer a credential request",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/records/{cred_ex_id}/store": {
            "post": {
                "description": "Store a received credential",
                "operationId": "post-issue-credential-records-cred_ex_id-store",
                "summary": "Store a received credential",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "path",
                        "description": "Credential exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v10CredentialStoreRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialStoreRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/send": {
            "post": {
                "description": "Send holder a credential, automating entire flow",
                "operationId": "post-issue-credential-send",
                "summary": "Send holder a credential, automating entire flow",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "v10CredentialProposalRequestMand",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialProposalRequestMand"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/send-offer": {
            "post": {
                "description": "Send holder a credential offer, independent of any proposal",
                "operationId": "post-issue-credential-send-offer",
                "summary": "Send holder a credential offer, independent of any proposal",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "v10CredentialFreeOfferRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialFreeOfferRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/issue-credential/send-proposal": {
            "post": {
                "description": "Send issuer a credential proposal",
                "operationId": "post-issue-credential-send-proposal",
                "summary": "Send issuer a credential proposal",
                "tags": [
                    "issue-credential v1.0"
                ],
                "parameters": [
                    {
                        "name": "v10CredentialProposalRequestOpt",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialProposalRequestOpt"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10CredentialExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_issue": false,
                                "auto_offer": false,
                                "auto_remove": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "credential": {},
                                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "credential_offer": {},
                                "credential_offer_dict": {},
                                "credential_proposal_dict": {},
                                "credential_request": {},
                                "credential_request_metadata": {},
                                "error_msg": "Credential definition identifier is not set in proposal",
                                "initiator": "self",
                                "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "raw_credential": {},
                                "revoc_reg_id": "string",
                                "revocation_id": "string",
                                "role": "issuer",
                                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                "state": "credential_acked",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/jsonld/sign": {
            "post": {
                "description": "Sign a JSON-LD structure and return it",
                "operationId": "post-jsonld-sign",
                "summary": "Sign a JSON-LD structure and return it",
                "tags": [
                    "jsonld"
                ],
                "parameters": [
                    {
                        "name": "signRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SignRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SignResponse"
                        },
                        "examples": {
                            "application/json": {
                                "error": "string",
                                "signed_doc": {}
                            }
                        }
                    }
                }
            }
        },
        "/jsonld/verify": {
            "post": {
                "description": "Verify a JSON-LD structure.",
                "operationId": "post-jsonld-verify",
                "summary": "Verify a JSON-LD structure.",
                "tags": [
                    "jsonld"
                ],
                "parameters": [
                    {
                        "name": "verifyRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/VerifyRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VerifyResponse"
                        },
                        "examples": {
                            "application/json": {
                                "error": "string",
                                "valid": true
                            }
                        }
                    }
                }
            }
        },
        "/out-of-band/create-invitation": {
            "post": {
                "description": "Create a new connection invitation",
                "operationId": "post-out-of-band-create-invitation",
                "summary": "Create a new connection invitation",
                "tags": [
                    "out-of-band"
                ],
                "parameters": [
                    {
                        "name": "auto_accept",
                        "in": "query",
                        "description": "Auto-accept connection (defaults to configuration)",
                        "type": "boolean"
                    },
                    {
                        "name": "multi_use",
                        "in": "query",
                        "description": "Create invitation for multiple use (default false)",
                        "type": "boolean"
                    },
                    {
                        "name": "invitationCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/InvitationCreateRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/InvitationRecord"
                        },
                        "examples": {
                            "application/json": {
                                "created_at": "2021-12-31 23:59:59Z",
                                "invi_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation": {},
                                "invitation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_url": "https://example.com/endpoint?c_i=eyJAdHlwZSI6ICIuLi4iLCAiLi4uIjogIi4uLiJ9XX0=",
                                "state": "await_response",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/out-of-band/receive-invitation": {
            "post": {
                "description": "Receive a new connection invitation",
                "operationId": "post-out-of-band-receive-invitation",
                "summary": "Receive a new connection invitation",
                "tags": [
                    "out-of-band"
                ],
                "parameters": [
                    {
                        "name": "alias",
                        "in": "query",
                        "description": "Alias for connection",
                        "type": "string"
                    },
                    {
                        "name": "auto_accept",
                        "in": "query",
                        "description": "Auto-accept connection (defaults to configuration)",
                        "type": "boolean"
                    },
                    {
                        "name": "mediation_id",
                        "in": "query",
                        "description": "Identifier for active mediation record to be used",
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "use_existing_connection",
                        "in": "query",
                        "description": "Use an existing connection, if possible",
                        "type": "boolean"
                    },
                    {
                        "name": "invitationMessage",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/InvitationMessage"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ConnRecord"
                        },
                        "examples": {
                            "application/json": {
                                "accept": "auto",
                                "alias": "Bob, providing quotes",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "connection_protocol": "connections/1.0",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "No DIDDoc provided; cannot connect to public DID",
                                "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                "invitation_mode": "once",
                                "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "my_did": "WgWxqztrNooG92RXvxSTWv",
                                "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "rfc23_state": "invitation-sent",
                                "routing_state": "active",
                                "state": "active",
                                "their_did": "WgWxqztrNooG92RXvxSTWv",
                                "their_label": "Bob",
                                "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                                "their_role": "requester",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/create-request": {
            "post": {
                "description": "Creates a presentation request not bound to any proposal or connection",
                "operationId": "post-present-proof-2-0-create-request",
                "summary": "Creates a presentation request not bound to any proposal or connection",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "v20PresCreateRequestRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20PresCreateRequestRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "pres": {},
                                "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "pres_proposal": {},
                                "pres_request": {},
                                "role": "prover",
                                "state": "proposal-sent",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/records": {
            "get": {
                "description": "Fetch all present-proof exchange records",
                "operationId": "get-present-proof-2-0-records",
                "summary": "Fetch all present-proof exchange records",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "connection_id",
                        "in": "query",
                        "description": "Format - uuid. Connection identifier",
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Role assigned in presentation exchange",
                        "type": "string",
                        "enum": [
                            "prover",
                            "verifier"
                        ]
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Presentation exchange state",
                        "type": "string",
                        "enum": [
                            "proposal-sent",
                            "proposal-received",
                            "request-sent",
                            "request-received",
                            "presentation-sent",
                            "presentation-received",
                            "done",
                            "abandoned"
                        ]
                    },
                    {
                        "name": "thread_id",
                        "in": "query",
                        "description": "Format - uuid. Thread identifier",
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresExRecordList"
                        },
                        "examples": {
                            "application/json": {
                                "results": [
                                    {
                                        "auto_present": false,
                                        "by_format": {},
                                        "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "created_at": "2021-12-31 23:59:59Z",
                                        "error_msg": "Invalid structure",
                                        "initiator": "self",
                                        "pres": {},
                                        "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "pres_proposal": {},
                                        "pres_request": {},
                                        "role": "prover",
                                        "state": "proposal-sent",
                                        "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "trace": true,
                                        "updated_at": "2021-12-31 23:59:59Z",
                                        "verified": "true"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/records/{pres_ex_id}": {
            "get": {
                "description": "Fetch a single presentation exchange record",
                "operationId": "get-present-proof-2-0-records-pres_ex_id",
                "summary": "Fetch a single presentation exchange record",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "pres": {},
                                "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "pres_proposal": {},
                                "pres_request": {},
                                "role": "prover",
                                "state": "proposal-sent",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an existing presentation exchange record",
                "operationId": "delete-present-proof-2-0-records-pres_ex_id",
                "summary": "Remove an existing presentation exchange record",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresentProofModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/records/{pres_ex_id}/credentials": {
            "get": {
                "description": "Fetch credentials from wallet for presentation request",
                "operationId": "get-present-proof-2-0-records-pres_ex_id-credentials",
                "summary": "Fetch credentials from wallet for presentation request",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Maximum number to retrieve",
                        "type": "string",
                        "pattern": "^[1-9][0-9]*$"
                    },
                    {
                        "name": "extra_query",
                        "in": "query",
                        "description": "(JSON) object mapping referents to extra WQL queries",
                        "type": "string",
                        "pattern": "^{\\s*\".*?\"\\s*:\\s*{.*?}\\s*(,\\s*\".*?\"\\s*:\\s*{.*?}\\s*)*\\s*}$"
                    },
                    {
                        "name": "referent",
                        "in": "query",
                        "description": "Proof request referents of interest, comma-separated",
                        "type": "string"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start index",
                        "type": "string",
                        "pattern": "^[0-9]*$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IndyCredPrecis"
                            }
                        },
                        "examples": {
                            "application/json": [
                                {
                                    "cred_info": {},
                                    "interval": {},
                                    "presentation_referents": [
                                        "1_age_uuid"
                                    ]
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/records/{pres_ex_id}/problem-report": {
            "post": {
                "description": "Send a problem report for presentation exchange",
                "operationId": "post-present-proof-2-0-records-pres_ex_id-problem-report",
                "summary": "Send a problem report for presentation exchange",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v20PresProblemReportRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20PresProblemReportRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresentProofModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/records/{pres_ex_id}/send-presentation": {
            "post": {
                "description": "Sends a proof presentation",
                "operationId": "post-present-proof-2-0-records-pres_ex_id-send-presentation",
                "summary": "Sends a proof presentation",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v20PresSpecByFormatRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20PresSpecByFormatRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "pres": {},
                                "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "pres_proposal": {},
                                "pres_request": {},
                                "role": "prover",
                                "state": "proposal-sent",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/records/{pres_ex_id}/send-request": {
            "post": {
                "description": "Sends a presentation request in reference to a proposal",
                "operationId": "post-present-proof-2-0-records-pres_ex_id-send-request",
                "summary": "Sends a presentation request in reference to a proposal",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "adminAPIMessageTracing",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AdminAPIMessageTracing"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "pres": {},
                                "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "pres_proposal": {},
                                "pres_request": {},
                                "role": "prover",
                                "state": "proposal-sent",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/records/{pres_ex_id}/verify-presentation": {
            "post": {
                "description": "Verify a received presentation",
                "operationId": "post-present-proof-2-0-records-pres_ex_id-verify-presentation",
                "summary": "Verify a received presentation",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "pres": {},
                                "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "pres_proposal": {},
                                "pres_request": {},
                                "role": "prover",
                                "state": "proposal-sent",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/send-proposal": {
            "post": {
                "description": "Sends a presentation proposal",
                "operationId": "post-present-proof-2-0-send-proposal",
                "summary": "Sends a presentation proposal",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "v20PresProposalRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20PresProposalRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "pres": {},
                                "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "pres_proposal": {},
                                "pres_request": {},
                                "role": "prover",
                                "state": "proposal-sent",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof-2.0/send-request": {
            "post": {
                "description": "Sends a free presentation request not bound to any proposal",
                "operationId": "post-present-proof-2-0-send-request",
                "summary": "Sends a free presentation request not bound to any proposal",
                "tags": [
                    "present-proof v2.0"
                ],
                "parameters": [
                    {
                        "name": "v20PresSendRequestRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V20PresSendRequestRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V20PresExRecord"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "by_format": {},
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "pres": {},
                                "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "pres_proposal": {},
                                "pres_request": {},
                                "role": "prover",
                                "state": "proposal-sent",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof/create-request": {
            "post": {
                "description": "Creates a presentation request not bound to any proposal or connection",
                "operationId": "post-present-proof-create-request",
                "summary": "Creates a presentation request not bound to any proposal or connection",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "v10PresentationCreateRequestRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationCreateRequestRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "presentation": {},
                                "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "presentation_proposal_dict": {},
                                "presentation_request": {},
                                "presentation_request_dict": {},
                                "role": "prover",
                                "state": "verified",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof/records": {
            "get": {
                "description": "Fetch all present-proof exchange records",
                "operationId": "get-present-proof-records",
                "summary": "Fetch all present-proof exchange records",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "connection_id",
                        "in": "query",
                        "description": "Format - uuid. Connection identifier",
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Role assigned in presentation exchange",
                        "type": "string",
                        "enum": [
                            "prover",
                            "verifier"
                        ]
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Presentation exchange state",
                        "type": "string",
                        "enum": [
                            "proposal_sent",
                            "proposal_received",
                            "request_sent",
                            "request_received",
                            "presentation_sent",
                            "presentation_received",
                            "verified",
                            "presentation_acked"
                        ]
                    },
                    {
                        "name": "thread_id",
                        "in": "query",
                        "description": "Format - uuid. Thread identifier",
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationExchangeList"
                        },
                        "examples": {
                            "application/json": {
                                "results": [
                                    {
                                        "auto_present": false,
                                        "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "created_at": "2021-12-31 23:59:59Z",
                                        "error_msg": "Invalid structure",
                                        "initiator": "self",
                                        "presentation": {},
                                        "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "presentation_proposal_dict": {},
                                        "presentation_request": {},
                                        "presentation_request_dict": {},
                                        "role": "prover",
                                        "state": "verified",
                                        "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "trace": true,
                                        "updated_at": "2021-12-31 23:59:59Z",
                                        "verified": "true"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/present-proof/records/{pres_ex_id}": {
            "get": {
                "description": "Fetch a single presentation exchange record",
                "operationId": "get-present-proof-records-pres_ex_id",
                "summary": "Fetch a single presentation exchange record",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "presentation": {},
                                "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "presentation_proposal_dict": {},
                                "presentation_request": {},
                                "presentation_request_dict": {},
                                "role": "prover",
                                "state": "verified",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an existing presentation exchange record",
                "operationId": "delete-present-proof-records-pres_ex_id",
                "summary": "Remove an existing presentation exchange record",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentProofModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/present-proof/records/{pres_ex_id}/credentials": {
            "get": {
                "description": "Fetch credentials for a presentation request from wallet",
                "operationId": "get-present-proof-records-pres_ex_id-credentials",
                "summary": "Fetch credentials for a presentation request from wallet",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Maximum number to retrieve",
                        "type": "string",
                        "pattern": "^[1-9][0-9]*$"
                    },
                    {
                        "name": "extra_query",
                        "in": "query",
                        "description": "(JSON) object mapping referents to extra WQL queries",
                        "type": "string",
                        "pattern": "^{\\s*\".*?\"\\s*:\\s*{.*?}\\s*(,\\s*\".*?\"\\s*:\\s*{.*?}\\s*)*\\s*}$"
                    },
                    {
                        "name": "referent",
                        "in": "query",
                        "description": "Proof request referents of interest, comma-separated",
                        "type": "string"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start index",
                        "type": "string",
                        "pattern": "^[0-9]*$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IndyCredPrecis"
                            }
                        },
                        "examples": {
                            "application/json": [
                                {
                                    "cred_info": {},
                                    "interval": {},
                                    "presentation_referents": [
                                        "1_age_uuid"
                                    ]
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/present-proof/records/{pres_ex_id}/problem-report": {
            "post": {
                "description": "Send a problem report for presentation exchange",
                "operationId": "post-present-proof-records-pres_ex_id-problem-report",
                "summary": "Send a problem report for presentation exchange",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "v10PresentationProblemReportRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationProblemReportRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentProofModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/present-proof/records/{pres_ex_id}/send-presentation": {
            "post": {
                "description": "Sends a proof presentation",
                "operationId": "post-present-proof-records-pres_ex_id-send-presentation",
                "summary": "Sends a proof presentation",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "indyPresSpec",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/IndyPresSpec"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "presentation": {},
                                "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "presentation_proposal_dict": {},
                                "presentation_request": {},
                                "presentation_request_dict": {},
                                "role": "prover",
                                "state": "verified",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof/records/{pres_ex_id}/send-request": {
            "post": {
                "description": "Sends a presentation request in reference to a proposal",
                "operationId": "post-present-proof-records-pres_ex_id-send-request",
                "summary": "Sends a presentation request in reference to a proposal",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "adminAPIMessageTracing",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AdminAPIMessageTracing"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "presentation": {},
                                "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "presentation_proposal_dict": {},
                                "presentation_request": {},
                                "presentation_request_dict": {},
                                "role": "prover",
                                "state": "verified",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof/records/{pres_ex_id}/verify-presentation": {
            "post": {
                "description": "Verify a received presentation",
                "operationId": "post-present-proof-records-pres_ex_id-verify-presentation",
                "summary": "Verify a received presentation",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "pres_ex_id",
                        "in": "path",
                        "description": "Presentation exchange identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "presentation": {},
                                "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "presentation_proposal_dict": {},
                                "presentation_request": {},
                                "presentation_request_dict": {},
                                "role": "prover",
                                "state": "verified",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof/send-proposal": {
            "post": {
                "description": "Sends a presentation proposal",
                "operationId": "post-present-proof-send-proposal",
                "summary": "Sends a presentation proposal",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "v10PresentationProposalRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationProposalRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "presentation": {},
                                "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "presentation_proposal_dict": {},
                                "presentation_request": {},
                                "presentation_request_dict": {},
                                "role": "prover",
                                "state": "verified",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/present-proof/send-request": {
            "post": {
                "description": "Sends a free presentation request not bound to any proposal",
                "operationId": "post-present-proof-send-request",
                "summary": "Sends a free presentation request not bound to any proposal",
                "tags": [
                    "present-proof v1.0"
                ],
                "parameters": [
                    {
                        "name": "v10PresentationSendRequestRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationSendRequestRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/V10PresentationExchange"
                        },
                        "examples": {
                            "application/json": {
                                "auto_present": false,
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "error_msg": "Invalid structure",
                                "initiator": "self",
                                "presentation": {},
                                "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "presentation_proposal_dict": {},
                                "presentation_request": {},
                                "presentation_request_dict": {},
                                "role": "prover",
                                "state": "verified",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "trace": true,
                                "updated_at": "2021-12-31 23:59:59Z",
                                "verified": "true"
                            }
                        }
                    }
                }
            }
        },
        "/resolver/resolve/{did}": {
            "get": {
                "description": "Retrieve doc for requested did",
                "operationId": "get-resolver-resolve-did",
                "summary": "Retrieve doc for requested did",
                "tags": [
                    "resolver"
                ],
                "parameters": [
                    {
                        "name": "did",
                        "in": "path",
                        "description": "DID",
                        "required": true,
                        "type": "string",
                        "pattern": "^did:([a-z0-9]+):((?:[a-zA-Z0-9._%-]*:)*[a-zA-Z0-9._%-]+)$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/ResolutionResult"
                        },
                        "examples": {
                            "application/json": {
                                "did_doc": {},
                                "metadata": {}
                            }
                        }
                    }
                }
            }
        },
        "/revocation/active-registry/{cred_def_id}": {
            "get": {
                "description": "Get current active revocation registry by credential definition id",
                "operationId": "get-revocation-active-registry-cred_def_id",
                "summary": "Get current active revocation registry by credential definition id",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "cred_def_id",
                        "in": "path",
                        "description": "Credential definition identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevRegResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                    "error_msg": "Revocation registry undefined",
                                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                                    "max_cred_num": 1000,
                                    "pending_pub": [
                                        "23"
                                    ],
                                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "revoc_def_type": "CL_ACCUM",
                                    "revoc_reg_def": {},
                                    "revoc_reg_entry": {},
                                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "active",
                                    "tag": "string",
                                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                    "tails_local_path": "string",
                                    "tails_public_uri": "string",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revocation/clear-pending-revocations": {
            "post": {
                "description": "Clear pending revocations",
                "operationId": "post-revocation-clear-pending-revocations",
                "summary": "Clear pending revocations",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "clearPendingRevocationsRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ClearPendingRevocationsRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/PublishRevocations"
                        },
                        "examples": {
                            "application/json": {
                                "rrid2crid": {}
                            }
                        }
                    }
                }
            }
        },
        "/revocation/create-registry": {
            "post": {
                "description": "Creates a new revocation registry",
                "operationId": "post-revocation-create-registry",
                "summary": "Creates a new revocation registry",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "revRegCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RevRegCreateRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevRegResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                    "error_msg": "Revocation registry undefined",
                                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                                    "max_cred_num": 1000,
                                    "pending_pub": [
                                        "23"
                                    ],
                                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "revoc_def_type": "CL_ACCUM",
                                    "revoc_reg_def": {},
                                    "revoc_reg_entry": {},
                                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "active",
                                    "tag": "string",
                                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                    "tails_local_path": "string",
                                    "tails_public_uri": "string",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revocation/credential-record": {
            "get": {
                "description": "Get credential revocation status",
                "operationId": "get-revocation-credential-record",
                "summary": "Get credential revocation status",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "cred_ex_id",
                        "in": "query",
                        "description": "Credential exchange identifier",
                        "type": "string",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                    },
                    {
                        "name": "cred_rev_id",
                        "in": "query",
                        "description": "Credential revocation identifier",
                        "type": "string",
                        "pattern": "^[1-9][0-9]*$"
                    },
                    {
                        "name": "rev_reg_id",
                        "in": "query",
                        "description": "Revocation registry identifier",
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CredRevRecordResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "cred_rev_id": "12345",
                                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "issued",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revocation/publish-revocations": {
            "post": {
                "description": "Publish pending revocations to ledger",
                "operationId": "post-revocation-publish-revocations",
                "summary": "Publish pending revocations to ledger",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "query",
                        "description": "Connection identifier",
                        "type": "string"
                    },
                    {
                        "name": "create_transaction_for_endorser",
                        "in": "query",
                        "description": "Create Transaction For Endorser's signature",
                        "type": "boolean"
                    },
                    {
                        "name": "publishRevocations",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PublishRevocations"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/TxnOrPublishRevocationsResult"
                        },
                        "examples": {
                            "application/json": {
                                "sent": {
                                    "rrid2crid": {}
                                },
                                "txn": {}
                            }
                        }
                    }
                }
            }
        },
        "/revocation/registries/created": {
            "get": {
                "description": "Search for matching revocation registries that current agent created",
                "operationId": "get-revocation-registries-created",
                "summary": "Search for matching revocation registries that current agent created",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "cred_def_id",
                        "in": "query",
                        "description": "Credential definition identifier",
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Revocation registry state",
                        "type": "string",
                        "enum": [
                            "init",
                            "generated",
                            "posted",
                            "active",
                            "full"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevRegsCreated"
                        },
                        "examples": {
                            "application/json": {
                                "rev_reg_ids": [
                                    "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/revocation/registry/{rev_reg_id}": {
            "get": {
                "description": "Get revocation registry by revocation registry id",
                "operationId": "get-revocation-registry-rev_reg_id",
                "summary": "Get revocation registry by revocation registry id",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "rev_reg_id",
                        "in": "path",
                        "description": "Revocation Registry identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevRegResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                    "error_msg": "Revocation registry undefined",
                                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                                    "max_cred_num": 1000,
                                    "pending_pub": [
                                        "23"
                                    ],
                                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "revoc_def_type": "CL_ACCUM",
                                    "revoc_reg_def": {},
                                    "revoc_reg_entry": {},
                                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "active",
                                    "tag": "string",
                                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                    "tails_local_path": "string",
                                    "tails_public_uri": "string",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Update revocation registry with new public URI to its tails file",
                "operationId": "patch-revocation-registry-rev_reg_id",
                "summary": "Update revocation registry with new public URI to its tails file",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "rev_reg_id",
                        "in": "path",
                        "description": "Revocation Registry identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                    },
                    {
                        "name": "revRegUpdateTailsFileUri",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RevRegUpdateTailsFileUri"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevRegResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                    "error_msg": "Revocation registry undefined",
                                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                                    "max_cred_num": 1000,
                                    "pending_pub": [
                                        "23"
                                    ],
                                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "revoc_def_type": "CL_ACCUM",
                                    "revoc_reg_def": {},
                                    "revoc_reg_entry": {},
                                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "active",
                                    "tag": "string",
                                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                    "tails_local_path": "string",
                                    "tails_public_uri": "string",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revocation/registry/{rev_reg_id}/definition": {
            "post": {
                "description": "Send revocation registry definition to ledger",
                "operationId": "post-revocation-registry-rev_reg_id-definition",
                "summary": "Send revocation registry definition to ledger",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "rev_reg_id",
                        "in": "path",
                        "description": "Revocation Registry identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                    },
                    {
                        "name": "conn_id",
                        "in": "query",
                        "description": "Connection identifier",
                        "type": "string"
                    },
                    {
                        "name": "create_transaction_for_endorser",
                        "in": "query",
                        "description": "Create Transaction For Endorser's signature",
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/TxnOrRevRegResult"
                        },
                        "examples": {
                            "application/json": {
                                "sent": {
                                    "result": {
                                        "created_at": "2021-12-31 23:59:59Z",
                                        "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                        "error_msg": "Revocation registry undefined",
                                        "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                                        "max_cred_num": 1000,
                                        "pending_pub": [
                                            "23"
                                        ],
                                        "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "revoc_def_type": "CL_ACCUM",
                                        "revoc_reg_def": {},
                                        "revoc_reg_entry": {},
                                        "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                        "state": "active",
                                        "tag": "string",
                                        "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                        "tails_local_path": "string",
                                        "tails_public_uri": "string",
                                        "updated_at": "2021-12-31 23:59:59Z"
                                    }
                                },
                                "txn": {}
                            }
                        }
                    }
                }
            }
        },
        "/revocation/registry/{rev_reg_id}/entry": {
            "post": {
                "description": "Send revocation registry entry to ledger",
                "operationId": "post-revocation-registry-rev_reg_id-entry",
                "summary": "Send revocation registry entry to ledger",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "rev_reg_id",
                        "in": "path",
                        "description": "Revocation Registry identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                    },
                    {
                        "name": "conn_id",
                        "in": "query",
                        "description": "Connection identifier",
                        "type": "string"
                    },
                    {
                        "name": "create_transaction_for_endorser",
                        "in": "query",
                        "description": "Create Transaction For Endorser's signature",
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevRegResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                    "error_msg": "Revocation registry undefined",
                                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                                    "max_cred_num": 1000,
                                    "pending_pub": [
                                        "23"
                                    ],
                                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "revoc_def_type": "CL_ACCUM",
                                    "revoc_reg_def": {},
                                    "revoc_reg_entry": {},
                                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "active",
                                    "tag": "string",
                                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                    "tails_local_path": "string",
                                    "tails_public_uri": "string",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revocation/registry/{rev_reg_id}/issued": {
            "get": {
                "description": "Get number of credentials issued against revocation registry",
                "operationId": "get-revocation-registry-rev_reg_id-issued",
                "summary": "Get number of credentials issued against revocation registry",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "rev_reg_id",
                        "in": "path",
                        "description": "Revocation Registry identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevRegIssuedResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": 0
                            }
                        }
                    }
                }
            }
        },
        "/revocation/registry/{rev_reg_id}/set-state": {
            "patch": {
                "description": "Set revocation registry state manually",
                "operationId": "patch-revocation-registry-rev_reg_id-set-state-state-state",
                "summary": "Set revocation registry state manually",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "rev_reg_id",
                        "in": "path",
                        "description": "Revocation Registry identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Revocation registry state to set",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "init",
                            "generated",
                            "posted",
                            "active",
                            "full"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevRegResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "created_at": "2021-12-31 23:59:59Z",
                                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                                    "error_msg": "Revocation registry undefined",
                                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                                    "max_cred_num": 1000,
                                    "pending_pub": [
                                        "23"
                                    ],
                                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                    "revoc_def_type": "CL_ACCUM",
                                    "revoc_reg_def": {},
                                    "revoc_reg_entry": {},
                                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                                    "state": "active",
                                    "tag": "string",
                                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                                    "tails_local_path": "string",
                                    "tails_public_uri": "string",
                                    "updated_at": "2021-12-31 23:59:59Z"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revocation/registry/{rev_reg_id}/tails-file": {
            "get": {
                "description": "Download tails file",
                "operationId": "get-revocation-registry-rev_reg_id-tails-file",
                "summary": "Download tails file",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "rev_reg_id",
                        "in": "path",
                        "description": "Revocation Registry identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                    }
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "responses": {
                    "200": {
                        "description": "tails file",
                        "schema": {
                            "format": "binary",
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Upload local tails file to server",
                "operationId": "put-revocation-registry-rev_reg_id-tails-file",
                "summary": "Upload local tails file to server",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "rev_reg_id",
                        "in": "path",
                        "description": "Revocation Registry identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevocationModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/revocation/revoke": {
            "post": {
                "description": "Revoke an issued credential",
                "operationId": "post-revocation-revoke",
                "summary": "Revoke an issued credential",
                "tags": [
                    "revocation"
                ],
                "parameters": [
                    {
                        "name": "revokeRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RevokeRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RevocationModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/schemas": {
            "post": {
                "description": "Sends a schema to the ledger",
                "operationId": "post-schemas",
                "summary": "Sends a schema to the ledger",
                "tags": [
                    "schema"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "query",
                        "description": "Connection identifier",
                        "type": "string"
                    },
                    {
                        "name": "create_transaction_for_endorser",
                        "in": "query",
                        "description": "Create Transaction For Endorser's signature",
                        "type": "boolean"
                    },
                    {
                        "name": "schemaSendRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SchemaSendRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/TxnOrSchemaSendResult"
                        },
                        "examples": {
                            "application/json": {
                                "sent": {},
                                "txn": {}
                            }
                        }
                    }
                }
            }
        },
        "/schemas/created": {
            "get": {
                "description": "Search for matching schema that agent originated",
                "operationId": "get-schemas-created",
                "summary": "Search for matching schema that agent originated",
                "tags": [
                    "schema"
                ],
                "parameters": [
                    {
                        "name": "schema_id",
                        "in": "query",
                        "description": "Schema identifier",
                        "type": "string",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                    },
                    {
                        "name": "schema_issuer_did",
                        "in": "query",
                        "description": "Schema issuer DID",
                        "type": "string",
                        "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                    },
                    {
                        "name": "schema_name",
                        "in": "query",
                        "description": "Schema name",
                        "type": "string"
                    },
                    {
                        "name": "schema_version",
                        "in": "query",
                        "description": "Schema version",
                        "type": "string",
                        "pattern": "^[0-9.]+$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SchemasCreatedResult"
                        },
                        "examples": {
                            "application/json": {
                                "schema_ids": [
                                    "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/schemas/{schema_id}": {
            "get": {
                "description": "Gets a schema from the ledger",
                "operationId": "get-schemas-schema_id",
                "summary": "Gets a schema from the ledger",
                "tags": [
                    "schema"
                ],
                "parameters": [
                    {
                        "name": "schema_id",
                        "in": "path",
                        "description": "Schema identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^[1-9][0-9]*|[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SchemaGetResult"
                        },
                        "examples": {
                            "application/json": {
                                "schema": {
                                    "attrNames": [
                                        "score"
                                    ],
                                    "id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                    "name": "schema_name",
                                    "seqNo": 10,
                                    "ver": "1.0",
                                    "version": "1.0"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schemas/{schema_id}/write_record": {
            "post": {
                "description": "Writes a schema non-secret record to the wallet",
                "operationId": "post-schemas-schema_id-write_record",
                "summary": "Writes a schema non-secret record to the wallet",
                "tags": [
                    "schema"
                ],
                "parameters": [
                    {
                        "name": "schema_id",
                        "in": "path",
                        "description": "Schema identifier",
                        "required": true,
                        "type": "string",
                        "pattern": "^[1-9][0-9]*|[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SchemaGetResult"
                        },
                        "examples": {
                            "application/json": {
                                "schema": {
                                    "attrNames": [
                                        "score"
                                    ],
                                    "id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                                    "name": "schema_name",
                                    "seqNo": 10,
                                    "ver": "1.0",
                                    "version": "1.0"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/wallet/did": {
            "get": {
                "description": "List wallet DIDs",
                "operationId": "get-wallet-did",
                "summary": "List wallet DIDs",
                "tags": [
                    "wallet"
                ],
                "parameters": [
                    {
                        "name": "did",
                        "in": "query",
                        "description": "DID of interest",
                        "type": "string",
                        "pattern": "^did:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$|^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                    },
                    {
                        "name": "key_type",
                        "in": "query",
                        "description": "Key type to query for.",
                        "type": "string",
                        "enum": [
                            "ed25519",
                            "bls12381g2"
                        ]
                    },
                    {
                        "name": "method",
                        "in": "query",
                        "description": "DID method to query for. e.g. sov to only fetch indy/sov DIDs",
                        "type": "string",
                        "enum": [
                            "key",
                            "sov"
                        ]
                    },
                    {
                        "name": "posture",
                        "in": "query",
                        "description": "Whether DID is current public DID, posted to ledger but current public DID, or local to the wallet",
                        "type": "string",
                        "enum": [
                            "public",
                            "posted",
                            "wallet_only"
                        ]
                    },
                    {
                        "name": "verkey",
                        "in": "query",
                        "description": "Verification key of interest",
                        "type": "string",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DIDList"
                        },
                        "examples": {
                            "application/json": {
                                "results": [
                                    {
                                        "did": "WgWxqztrNooG92RXvxSTWv",
                                        "key_type": "ed25519",
                                        "method": "sov",
                                        "posture": "wallet_only",
                                        "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/wallet/did/create": {
            "post": {
                "description": "Create a local DID",
                "operationId": "post-wallet-did-create",
                "summary": "Create a local DID",
                "tags": [
                    "wallet"
                ],
                "parameters": [
                    {
                        "name": "dIDCreate",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DIDCreate"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DIDResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "did": "WgWxqztrNooG92RXvxSTWv",
                                    "key_type": "ed25519",
                                    "method": "sov",
                                    "posture": "wallet_only",
                                    "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/wallet/did/local/rotate-keypair": {
            "patch": {
                "description": "Rotate keypair for a DID not posted to the ledger",
                "operationId": "patch-wallet-did-local-rotate-keypair-did-did",
                "summary": "Rotate keypair for a DID not posted to the ledger",
                "tags": [
                    "wallet"
                ],
                "parameters": [
                    {
                        "name": "did",
                        "in": "query",
                        "description": "DID of interest",
                        "required": true,
                        "type": "string",
                        "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/WalletModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/wallet/did/public": {
            "get": {
                "description": "Fetch the current public DID",
                "operationId": "get-wallet-did-public",
                "summary": "Fetch the current public DID",
                "tags": [
                    "wallet"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DIDResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "did": "WgWxqztrNooG92RXvxSTWv",
                                    "key_type": "ed25519",
                                    "method": "sov",
                                    "posture": "wallet_only",
                                    "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Assign the current public DID",
                "operationId": "post-wallet-did-public-did-did",
                "summary": "Assign the current public DID",
                "tags": [
                    "wallet"
                ],
                "parameters": [
                    {
                        "name": "did",
                        "in": "query",
                        "description": "DID of interest",
                        "required": true,
                        "type": "string",
                        "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                    }, {
                        "name" : "conn_id",
                        "in" : "query",
                        "description" : "Connection identifier",
                        "required" : false,
                        "type" : "string"
                        }, {
                        "name" : "create_transaction_for_endorser",
                        "in" : "query",
                        "description" : "Create Transaction For Endorser's signature",
                        "required" : false,
                        "type" : "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DIDResult"
                        },
                        "examples": {
                            "application/json": {
                                "result": {
                                    "did": "WgWxqztrNooG92RXvxSTWv",
                                    "key_type": "ed25519",
                                    "method": "sov",
                                    "posture": "wallet_only",
                                    "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/wallet/get-did-endpoint": {
            "get": {
                "description": "Query DID endpoint in wallet",
                "operationId": "get-wallet-get-did-endpoint-did-did",
                "summary": "Query DID endpoint in wallet",
                "tags": [
                    "wallet"
                ],
                "parameters": [
                    {
                        "name": "did",
                        "in": "query",
                        "description": "DID of interest",
                        "required": true,
                        "type": "string",
                        "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DIDEndpoint"
                        },
                        "examples": {
                            "application/json": {
                                "did": "WgWxqztrNooG92RXvxSTWv",
                                "endpoint": "https://myhost:8021"
                            }
                        }
                    }
                }
            }
        },
        "/wallet/set-did-endpoint": {
            "post": {
                "description": "Update endpoint in wallet and on ledger if posted to it",
                "operationId": "post-wallet-set-did-endpoint",
                "summary": "Update endpoint in wallet and on ledger if posted to it",
                "tags": [
                    "wallet"
                ],
                "parameters": [
                    {
                        "name": "dIDEndpointWithType",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DIDEndpointWithType"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/WalletModuleResponse"
                        },
                        "examples": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/transaction/{tran_id}/resend": {
            "post": {
                "description": "For Author to resend a particular transaction request",
                "operationId": "post-transaction-tran_id-resend",
                "summary": "For Author to resend a particular transaction request",
                "tags": [
                    "endorse-transaction"
                ],
                "parameters": [
                    {
                        "name": "tran_id",
                        "in": "path",
                        "description": "Transaction identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/TransactionRecord"
                        },
                        "examples": {
                            "application/json": {
                                "_type": "101",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "endorser_write_txn": true,
                                "formats": [
                                    {
                                        "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "format": "dif/endorse-transaction/request@v1.0"
                                    }
                                ],
                                "messages_attach": [
                                    {
                                        "@id": "143c458d-1b1c-40c7-ab85-4d16808ddf0a",
                                        "data": {
                                            "json": "{\"endorser\": \"V4SGRU86Z58d6TV7PBUe6f\",\"identifier\": \"LjgpST2rjsoxYegQDRm7EL\",\"operation\": {\"data\": {\"attr_names\": [\"first_name\", \"last_name\"],\"name\": \"test_schema\",\"version\": \"2.1\",},\"type\": \"101\",},\"protocolVersion\": 2,\"reqId\": 1597766666168851000,\"signatures\": {\"LjgpST2rjsox\": \"4ATKMn6Y9sTgwqaGTm7py2c2M8x1EVDTWKZArwyuPgjU\"},\"taaAcceptance\": {\"mechanism\": \"manual\",\"taaDigest\": \"f50fe2c2ab977006761d36bd6f23e4c6a7e0fc2feb9f62\",\"time\": 1597708800,}}"
                                        },
                                        "mime-type": "application/json"
                                    }
                                ],
                                "signature_request": [
                                    {
                                        "author_goal_code": "transaction.ledger.write",
                                        "context": "did:sov",
                                        "method": "add-signature",
                                        "signature_type": "<requested signature type>",
                                        "signer_goal_code": "transaction.endorse"
                                    }
                                ],
                                "signature_response": [
                                    {
                                        "context": "did:sov",
                                        "message_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "method": "add-signature",
                                        "signer_goal_code": "transaction.refuse"
                                    }
                                ],
                                "state": "active",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "timing": {
                                    "expires_time": "2020-12-13T17:29:06+00:00"
                                },
                                "trace": true,
                                "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "description": "Query transactions",
                "operationId": "get-transactions",
                "summary": "Query transactions",
                "tags": [
                    "endorse-transaction"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/TransactionList"
                        },
                        "examples": {
                            "application/json": {
                                "results": [
                                    {
                                        "_type": "101",
                                        "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "created_at": "2021-12-31 23:59:59Z",
                                        "endorser_write_txn": true,
                                        "formats": [
                                            {
                                                "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                                "format": "dif/endorse-transaction/request@v1.0"
                                            }
                                        ],
                                        "messages_attach": [
                                            {
                                                "@id": "143c458d-1b1c-40c7-ab85-4d16808ddf0a",
                                                "data": {
                                                    "json": "{\"endorser\": \"V4SGRU86Z58d6TV7PBUe6f\",\"identifier\": \"LjgpST2rjsoxYegQDRm7EL\",\"operation\": {\"data\": {\"attr_names\": [\"first_name\", \"last_name\"],\"name\": \"test_schema\",\"version\": \"2.1\",},\"type\": \"101\",},\"protocolVersion\": 2,\"reqId\": 1597766666168851000,\"signatures\": {\"LjgpST2rjsox\": \"4ATKMn6Y9sTgwqaGTm7py2c2M8x1EVDTWKZArwyuPgjU\"},\"taaAcceptance\": {\"mechanism\": \"manual\",\"taaDigest\": \"f50fe2c2ab977006761d36bd6f23e4c6a7e0fc2feb9f62\",\"time\": 1597708800,}}"
                                                },
                                                "mime-type": "application/json"
                                            }
                                        ],
                                        "signature_request": [
                                            {
                                                "author_goal_code": "transaction.ledger.write",
                                                "context": "did:sov",
                                                "method": "add-signature",
                                                "signature_type": "<requested signature type>",
                                                "signer_goal_code": "transaction.endorse"
                                            }
                                        ],
                                        "signature_response": [
                                            {
                                                "context": "did:sov",
                                                "message_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                                "method": "add-signature",
                                                "signer_goal_code": "transaction.refuse"
                                            }
                                        ],
                                        "state": "active",
                                        "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "timing": {
                                            "expires_time": "2020-12-13T17:29:06+00:00"
                                        },
                                        "trace": true,
                                        "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "updated_at": "2021-12-31 23:59:59Z"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/transactions/create-request": {
            "post": {
                "description": "For author to send a transaction request",
                "operationId": "post-transactions-create-request-tran_id-tran_id",
                "summary": "For author to send a transaction request",
                "tags": [
                    "endorse-transaction"
                ],
                "parameters": [
                    {
                        "name": "tran_id",
                        "in": "query",
                        "description": "Transaction identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endorser_write_txn",
                        "in": "query",
                        "description": "Endorser will write the transaction after endorsing it",
                        "type": "boolean"
                    },
                    {
                        "name": "date",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Date"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/TransactionRecord"
                        },
                        "examples": {
                            "application/json": {
                                "_type": "101",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "endorser_write_txn": true,
                                "formats": [
                                    {
                                        "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "format": "dif/endorse-transaction/request@v1.0"
                                    }
                                ],
                                "messages_attach": [
                                    {
                                        "@id": "143c458d-1b1c-40c7-ab85-4d16808ddf0a",
                                        "data": {
                                            "json": "{\"endorser\": \"V4SGRU86Z58d6TV7PBUe6f\",\"identifier\": \"LjgpST2rjsoxYegQDRm7EL\",\"operation\": {\"data\": {\"attr_names\": [\"first_name\", \"last_name\"],\"name\": \"test_schema\",\"version\": \"2.1\",},\"type\": \"101\",},\"protocolVersion\": 2,\"reqId\": 1597766666168851000,\"signatures\": {\"LjgpST2rjsox\": \"4ATKMn6Y9sTgwqaGTm7py2c2M8x1EVDTWKZArwyuPgjU\"},\"taaAcceptance\": {\"mechanism\": \"manual\",\"taaDigest\": \"f50fe2c2ab977006761d36bd6f23e4c6a7e0fc2feb9f62\",\"time\": 1597708800,}}"
                                        },
                                        "mime-type": "application/json"
                                    }
                                ],
                                "signature_request": [
                                    {
                                        "author_goal_code": "transaction.ledger.write",
                                        "context": "did:sov",
                                        "method": "add-signature",
                                        "signature_type": "<requested signature type>",
                                        "signer_goal_code": "transaction.endorse"
                                    }
                                ],
                                "signature_response": [
                                    {
                                        "context": "did:sov",
                                        "message_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "method": "add-signature",
                                        "signer_goal_code": "transaction.refuse"
                                    }
                                ],
                                "state": "active",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "timing": {
                                    "expires_time": "2020-12-13T17:29:06+00:00"
                                },
                                "trace": true,
                                "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/transactions/{conn_id}/set-endorser-info": {
            "post": {
                "description": "Set Endorser Info",
                "operationId": "post-transactions-conn_id-set-endorser-info-endorser_did-endorser_did",
                "summary": "Set Endorser Info",
                "tags": [
                    "endorse-transaction"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endorser_did",
                        "in": "query",
                        "description": "Endorser DID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "endorser_name",
                        "in": "query",
                        "description": "Endorser Name",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/EndorserInfo"
                        },
                        "examples": {
                            "application/json": {
                                "endorser_did": "string",
                                "endorser_name": "string"
                            }
                        }
                    }
                }
            }
        },
        "/transactions/{conn_id}/set-endorser-role": {
            "post": {
                "description": "Set transaction jobs",
                "operationId": "post-transactions-conn_id-set-endorser-role",
                "summary": "Set transaction jobs",
                "tags": [
                    "endorse-transaction"
                ],
                "parameters": [
                    {
                        "name": "conn_id",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transaction_my_job",
                        "in": "query",
                        "description": "Transaction related jobs",
                        "type": "string",
                        "enum": [
                            "TRANSACTION_AUTHOR",
                            "TRANSACTION_ENDORSER",
                            "reset"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/TransactionJobs"
                        },
                        "examples": {
                            "application/json": {
                                "transaction_my_job": "TRANSACTION_AUTHOR",
                                "transaction_their_job": "TRANSACTION_AUTHOR"
                            }
                        }
                    }
                }
            }
        },
        "/transactions/{tran_id}": {
            "get": {
                "description": "Fetch a single transaction record",
                "operationId": "get-transactions-tran_id",
                "summary": "Fetch a single transaction record",
                "tags": [
                    "endorse-transaction"
                ],
                "parameters": [
                    {
                        "name": "tran_id",
                        "in": "path",
                        "description": "Transaction identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/TransactionRecord"
                        },
                        "examples": {
                            "application/json": {
                                "_type": "101",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "endorser_write_txn": true,
                                "formats": [
                                    {
                                        "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "format": "dif/endorse-transaction/request@v1.0"
                                    }
                                ],
                                "messages_attach": [
                                    {
                                        "@id": "143c458d-1b1c-40c7-ab85-4d16808ddf0a",
                                        "data": {
                                            "json": "{\"endorser\": \"V4SGRU86Z58d6TV7PBUe6f\",\"identifier\": \"LjgpST2rjsoxYegQDRm7EL\",\"operation\": {\"data\": {\"attr_names\": [\"first_name\", \"last_name\"],\"name\": \"test_schema\",\"version\": \"2.1\",},\"type\": \"101\",},\"protocolVersion\": 2,\"reqId\": 1597766666168851000,\"signatures\": {\"LjgpST2rjsox\": \"4ATKMn6Y9sTgwqaGTm7py2c2M8x1EVDTWKZArwyuPgjU\"},\"taaAcceptance\": {\"mechanism\": \"manual\",\"taaDigest\": \"f50fe2c2ab977006761d36bd6f23e4c6a7e0fc2feb9f62\",\"time\": 1597708800,}}"
                                        },
                                        "mime-type": "application/json"
                                    }
                                ],
                                "signature_request": [
                                    {
                                        "author_goal_code": "transaction.ledger.write",
                                        "context": "did:sov",
                                        "method": "add-signature",
                                        "signature_type": "<requested signature type>",
                                        "signer_goal_code": "transaction.endorse"
                                    }
                                ],
                                "signature_response": [
                                    {
                                        "context": "did:sov",
                                        "message_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "method": "add-signature",
                                        "signer_goal_code": "transaction.refuse"
                                    }
                                ],
                                "state": "active",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "timing": {
                                    "expires_time": "2020-12-13T17:29:06+00:00"
                                },
                                "trace": true,
                                "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/transactions/{tran_id}/cancel": {
            "post": {
                "description": "For Author to cancel a particular transaction request",
                "operationId": "post-transactions-tran_id-cancel",
                "summary": "For Author to cancel a particular transaction request",
                "tags": [
                    "endorse-transaction"
                ],
                "parameters": [
                    {
                        "name": "tran_id",
                        "in": "path",
                        "description": "Transaction identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/TransactionRecord"
                        },
                        "examples": {
                            "application/json": {
                                "_type": "101",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "endorser_write_txn": true,
                                "formats": [
                                    {
                                        "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "format": "dif/endorse-transaction/request@v1.0"
                                    }
                                ],
                                "messages_attach": [
                                    {
                                        "@id": "143c458d-1b1c-40c7-ab85-4d16808ddf0a",
                                        "data": {
                                            "json": "{\"endorser\": \"V4SGRU86Z58d6TV7PBUe6f\",\"identifier\": \"LjgpST2rjsoxYegQDRm7EL\",\"operation\": {\"data\": {\"attr_names\": [\"first_name\", \"last_name\"],\"name\": \"test_schema\",\"version\": \"2.1\",},\"type\": \"101\",},\"protocolVersion\": 2,\"reqId\": 1597766666168851000,\"signatures\": {\"LjgpST2rjsox\": \"4ATKMn6Y9sTgwqaGTm7py2c2M8x1EVDTWKZArwyuPgjU\"},\"taaAcceptance\": {\"mechanism\": \"manual\",\"taaDigest\": \"f50fe2c2ab977006761d36bd6f23e4c6a7e0fc2feb9f62\",\"time\": 1597708800,}}"
                                        },
                                        "mime-type": "application/json"
                                    }
                                ],
                                "signature_request": [
                                    {
                                        "author_goal_code": "transaction.ledger.write",
                                        "context": "did:sov",
                                        "method": "add-signature",
                                        "signature_type": "<requested signature type>",
                                        "signer_goal_code": "transaction.endorse"
                                    }
                                ],
                                "signature_response": [
                                    {
                                        "context": "did:sov",
                                        "message_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "method": "add-signature",
                                        "signer_goal_code": "transaction.refuse"
                                    }
                                ],
                                "state": "active",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "timing": {
                                    "expires_time": "2020-12-13T17:29:06+00:00"
                                },
                                "trace": true,
                                "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/transactions/{tran_id}/endorse": {
            "post": {
                "description": "For Endorser to endorse a particular transaction record",
                "operationId": "post-transactions-tran_id-endorse",
                "summary": "For Endorser to endorse a particular transaction record",
                "tags": [
                    "endorse-transaction"
                ],
                "parameters": [
                    {
                        "name": "tran_id",
                        "in": "path",
                        "description": "Transaction identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/TransactionRecord"
                        },
                        "examples": {
                            "application/json": {
                                "_type": "101",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "endorser_write_txn": true,
                                "formats": [
                                    {
                                        "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "format": "dif/endorse-transaction/request@v1.0"
                                    }
                                ],
                                "messages_attach": [
                                    {
                                        "@id": "143c458d-1b1c-40c7-ab85-4d16808ddf0a",
                                        "data": {
                                            "json": "{\"endorser\": \"V4SGRU86Z58d6TV7PBUe6f\",\"identifier\": \"LjgpST2rjsoxYegQDRm7EL\",\"operation\": {\"data\": {\"attr_names\": [\"first_name\", \"last_name\"],\"name\": \"test_schema\",\"version\": \"2.1\",},\"type\": \"101\",},\"protocolVersion\": 2,\"reqId\": 1597766666168851000,\"signatures\": {\"LjgpST2rjsox\": \"4ATKMn6Y9sTgwqaGTm7py2c2M8x1EVDTWKZArwyuPgjU\"},\"taaAcceptance\": {\"mechanism\": \"manual\",\"taaDigest\": \"f50fe2c2ab977006761d36bd6f23e4c6a7e0fc2feb9f62\",\"time\": 1597708800,}}"
                                        },
                                        "mime-type": "application/json"
                                    }
                                ],
                                "signature_request": [
                                    {
                                        "author_goal_code": "transaction.ledger.write",
                                        "context": "did:sov",
                                        "method": "add-signature",
                                        "signature_type": "<requested signature type>",
                                        "signer_goal_code": "transaction.endorse"
                                    }
                                ],
                                "signature_response": [
                                    {
                                        "context": "did:sov",
                                        "message_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "method": "add-signature",
                                        "signer_goal_code": "transaction.refuse"
                                    }
                                ],
                                "state": "active",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "timing": {
                                    "expires_time": "2020-12-13T17:29:06+00:00"
                                },
                                "trace": true,
                                "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/transactions/{tran_id}/refuse": {
            "post": {
                "description": "For Endorser to refuse a particular transaction record",
                "operationId": "post-transactions-tran_id-refuse",
                "summary": "For Endorser to refuse a particular transaction record",
                "tags": [
                    "endorse-transaction"
                ],
                "parameters": [
                    {
                        "name": "tran_id",
                        "in": "path",
                        "description": "Transaction identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/TransactionRecord"
                        },
                        "examples": {
                            "application/json": {
                                "_type": "101",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "endorser_write_txn": true,
                                "formats": [
                                    {
                                        "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "format": "dif/endorse-transaction/request@v1.0"
                                    }
                                ],
                                "messages_attach": [
                                    {
                                        "@id": "143c458d-1b1c-40c7-ab85-4d16808ddf0a",
                                        "data": {
                                            "json": "{\"endorser\": \"V4SGRU86Z58d6TV7PBUe6f\",\"identifier\": \"LjgpST2rjsoxYegQDRm7EL\",\"operation\": {\"data\": {\"attr_names\": [\"first_name\", \"last_name\"],\"name\": \"test_schema\",\"version\": \"2.1\",},\"type\": \"101\",},\"protocolVersion\": 2,\"reqId\": 1597766666168851000,\"signatures\": {\"LjgpST2rjsox\": \"4ATKMn6Y9sTgwqaGTm7py2c2M8x1EVDTWKZArwyuPgjU\"},\"taaAcceptance\": {\"mechanism\": \"manual\",\"taaDigest\": \"f50fe2c2ab977006761d36bd6f23e4c6a7e0fc2feb9f62\",\"time\": 1597708800,}}"
                                        },
                                        "mime-type": "application/json"
                                    }
                                ],
                                "signature_request": [
                                    {
                                        "author_goal_code": "transaction.ledger.write",
                                        "context": "did:sov",
                                        "method": "add-signature",
                                        "signature_type": "<requested signature type>",
                                        "signer_goal_code": "transaction.endorse"
                                    }
                                ],
                                "signature_response": [
                                    {
                                        "context": "did:sov",
                                        "message_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "method": "add-signature",
                                        "signer_goal_code": "transaction.refuse"
                                    }
                                ],
                                "state": "active",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "timing": {
                                    "expires_time": "2020-12-13T17:29:06+00:00"
                                },
                                "trace": true,
                                "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        },
        "/transactions/{tran_id}/write": {
            "post": {
                "description": "For Author / Endorser to write an endorsed transaction to the ledger",
                "operationId": "post-transactions-tran_id-write",
                "summary": "For Author / Endorser to write an endorsed transaction to the ledger",
                "tags": [
                    "endorse-transaction"
                ],
                "parameters": [
                    {
                        "name": "tran_id",
                        "in": "path",
                        "description": "Transaction identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "null",
                        "schema": {
                            "$ref": "#/definitions/TransactionRecord"
                        },
                        "examples": {
                            "application/json": {
                                "_type": "101",
                                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "created_at": "2021-12-31 23:59:59Z",
                                "endorser_write_txn": true,
                                "formats": [
                                    {
                                        "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "format": "dif/endorse-transaction/request@v1.0"
                                    }
                                ],
                                "messages_attach": [
                                    {
                                        "@id": "143c458d-1b1c-40c7-ab85-4d16808ddf0a",
                                        "data": {
                                            "json": "{\"endorser\": \"V4SGRU86Z58d6TV7PBUe6f\",\"identifier\": \"LjgpST2rjsoxYegQDRm7EL\",\"operation\": {\"data\": {\"attr_names\": [\"first_name\", \"last_name\"],\"name\": \"test_schema\",\"version\": \"2.1\",},\"type\": \"101\",},\"protocolVersion\": 2,\"reqId\": 1597766666168851000,\"signatures\": {\"LjgpST2rjsox\": \"4ATKMn6Y9sTgwqaGTm7py2c2M8x1EVDTWKZArwyuPgjU\"},\"taaAcceptance\": {\"mechanism\": \"manual\",\"taaDigest\": \"f50fe2c2ab977006761d36bd6f23e4c6a7e0fc2feb9f62\",\"time\": 1597708800,}}"
                                        },
                                        "mime-type": "application/json"
                                    }
                                ],
                                "signature_request": [
                                    {
                                        "author_goal_code": "transaction.ledger.write",
                                        "context": "did:sov",
                                        "method": "add-signature",
                                        "signature_type": "<requested signature type>",
                                        "signer_goal_code": "transaction.endorse"
                                    }
                                ],
                                "signature_response": [
                                    {
                                        "context": "did:sov",
                                        "message_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                        "method": "add-signature",
                                        "signer_goal_code": "transaction.refuse"
                                    }
                                ],
                                "state": "active",
                                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "timing": {
                                    "expires_time": "2020-12-13T17:29:06+00:00"
                                },
                                "trace": true,
                                "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "updated_at": "2021-12-31 23:59:59Z"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AMLRecord": {
            "type": "object",
            "properties": {
                "aml": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "amlContext": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "ActionMenuFetchResult": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/ActionMenuFetchResult_result"
                }
            }
        },
        "ActionMenuModulesResult": {
            "type": "object"
        },
        "AdminAPIMessageTracing": {
            "type": "object",
            "properties": {
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "trace": true
            }
        },
        "AdminConfig": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Configuration settings",
                    "type": "object"
                }
            }
        },
        "AdminMediationDeny": {
            "type": "object",
            "properties": {
                "mediator_terms": {
                    "description": "List of mediator rules for recipient",
                    "type": "array",
                    "items": {
                        "description": "Indicate terms to which the mediator requires the recipient to agree",
                        "type": "string"
                    }
                },
                "recipient_terms": {
                    "description": "List of recipient rules for mediation",
                    "type": "array",
                    "items": {
                        "description": "Indicate terms to which the recipient requires the mediator to agree",
                        "type": "string"
                    }
                }
            }
        },
        "AdminModules": {
            "type": "object",
            "properties": {
                "result": {
                    "description": "List of admin modules",
                    "type": "array",
                    "items": {
                        "description": "admin module",
                        "type": "string"
                    }
                }
            }
        },
        "AdminReset": {
            "type": "object"
        },
        "AdminShutdown": {
            "type": "object"
        },
        "AdminStatus": {
            "type": "object",
            "properties": {
                "conductor": {
                    "description": "Conductor statistics",
                    "type": "object"
                },
                "label": {
                    "description": "Default label",
                    "type": "string",
                    "x-nullable": true
                },
                "timing": {
                    "description": "Timing results",
                    "type": "object"
                },
                "version": {
                    "description": "Version code",
                    "type": "string"
                }
            }
        },
        "AdminStatusLiveliness": {
            "type": "object",
            "properties": {
                "alive": {
                    "description": "Liveliness status",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "AdminStatusReadiness": {
            "type": "object",
            "properties": {
                "ready": {
                    "description": "Readiness status",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "AttachDecorator": {
            "required": [
                "data"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Attachment identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "byte_count": {
                    "format": "int32",
                    "description": "Byte count of data included by reference",
                    "type": "integer",
                    "example": 1234
                },
                "data": {
                    "$ref": "#/definitions/AttachDecoratorData"
                },
                "description": {
                    "description": "Human-readable description of content",
                    "type": "string",
                    "example": "view from doorway, facing east, with lights off"
                },
                "filename": {
                    "description": "File name",
                    "type": "string",
                    "example": "IMG1092348.png"
                },
                "lastmod_time": {
                    "description": "Hint regarding last modification datetime, in ISO-8601 format",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "mime-type": {
                    "description": "MIME type",
                    "type": "string",
                    "example": "image/png"
                }
            }
        },
        "AttachDecoratorData": {
            "type": "object",
            "properties": {
                "base64": {
                    "description": "Base64-encoded data",
                    "pattern": "^[a-zA-Z0-9+/]*={0,2}$",
                    "type": "string",
                    "example": "ey4uLn0="
                },
                "json": {
                    "description": "JSON-serialized data",
                    "type": "object",
                    "example": "{\"sample\": \"content\"}"
                },
                "jws": {
                    "$ref": "#/definitions/AttachDecoratorData_jws"
                },
                "links": {
                    "description": "List of hypertext links to data",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "https://link.to/data"
                    }
                },
                "sha256": {
                    "description": "SHA256 hash (binhex encoded) of content",
                    "pattern": "^[a-fA-F0-9+/]{64}$",
                    "type": "string",
                    "example": "617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb"
                }
            }
        },
        "AttachDecoratorData1JWS": {
            "required": [
                "header",
                "signature"
            ],
            "type": "object",
            "properties": {
                "header": {
                    "$ref": "#/definitions/AttachDecoratorDataJWSHeader"
                },
                "protected": {
                    "description": "protected JWS header",
                    "pattern": "^[-_a-zA-Z0-9]*$",
                    "type": "string",
                    "example": "ey4uLn0"
                },
                "signature": {
                    "description": "signature",
                    "pattern": "^[-_a-zA-Z0-9]*$",
                    "type": "string",
                    "example": "ey4uLn0"
                }
            }
        },
        "AttachDecoratorDataJWS": {
            "type": "object",
            "properties": {
                "header": {
                    "$ref": "#/definitions/AttachDecoratorDataJWSHeader"
                },
                "protected": {
                    "description": "protected JWS header",
                    "pattern": "^[-_a-zA-Z0-9]*$",
                    "type": "string",
                    "example": "ey4uLn0"
                },
                "signature": {
                    "description": "signature",
                    "pattern": "^[-_a-zA-Z0-9]*$",
                    "type": "string",
                    "example": "ey4uLn0"
                },
                "signatures": {
                    "description": "List of signatures",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecoratorData1JWS"
                    }
                }
            }
        },
        "AttachDecoratorDataJWSHeader": {
            "required": [
                "kid"
            ],
            "type": "object",
            "properties": {
                "kid": {
                    "description": "Key identifier, in W3C did:key or DID URL format",
                    "pattern": "^did:(?:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+|sov:[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}(;.*)?(\\?.*)?#.+)$",
                    "type": "string",
                    "example": "did:sov:LjgpST2rjsoxYegQDRm7EL#keys-4"
                }
            }
        },
        "AttachmentDef": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Attachment identifier",
                    "type": "string",
                    "example": "attachment-0"
                },
                "type": {
                    "description": "Attachment type",
                    "enum": [
                        "credential-offer",
                        "present-proof"
                    ],
                    "type": "string",
                    "example": "present-proof"
                }
            }
        },
        "AttributeMimeTypesResult": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "object",
                    "additionalProperties": {
                        "description": "MIME type",
                        "type": "string"
                    },
                    "x-nullable": true
                }
            }
        },
        "BasicMessageModuleResponse": {
            "type": "object"
        },
        "ClaimFormat": {
            "type": "object",
            "properties": {
                "jwt": {
                    "type": "object"
                },
                "jwt_vc": {
                    "type": "object"
                },
                "jwt_vp": {
                    "type": "object"
                },
                "ldp": {
                    "type": "object"
                },
                "ldp_vc": {
                    "type": "object"
                },
                "ldp_vp": {
                    "type": "object"
                }
            }
        },
        "ClearPendingRevocationsRequest": {
            "type": "object",
            "properties": {
                "purge": {
                    "description": "Credential revocation ids by revocation registry id: omit for all, specify null or empty list for all pending per revocation registry",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "description": "Credential revocation identifier",
                            "pattern": "^[1-9][0-9]*$",
                            "type": "string",
                            "example": "12345"
                        }
                    }
                }
            },
            "example": {
                "purge": {}
            }
        },
        "ConnRecord": {
            "type": "object",
            "properties": {
                "accept": {
                    "description": "Connection acceptance: manual or auto",
                    "enum": [
                        "manual",
                        "auto"
                    ],
                    "type": "string",
                    "example": "auto"
                },
                "alias": {
                    "description": "Optional alias to apply to connection for later use",
                    "type": "string",
                    "example": "Bob, providing quotes"
                },
                "connection_id": {
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "connection_protocol": {
                    "description": "Connection protocol used",
                    "enum": [
                        "connections/1.0",
                        "didexchange/1.0"
                    ],
                    "type": "string",
                    "example": "connections/1.0"
                },
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "error_msg": {
                    "description": "Error message",
                    "type": "string",
                    "example": "No DIDDoc provided; cannot connect to public DID"
                },
                "inbound_connection_id": {
                    "description": "Inbound routing connection id to use",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "invitation_key": {
                    "description": "Public key for connection",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                    "type": "string",
                    "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                },
                "invitation_mode": {
                    "description": "Invitation mode",
                    "enum": [
                        "once",
                        "multi",
                        "static"
                    ],
                    "type": "string",
                    "example": "once"
                },
                "invitation_msg_id": {
                    "description": "ID of out-of-band invitation message",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "my_did": {
                    "description": "Our DID for connection",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "request_id": {
                    "description": "Connection request identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "rfc23_state": {
                    "description": "State per RFC 23",
                    "type": "string",
                    "readOnly": true,
                    "example": "invitation-sent"
                },
                "routing_state": {
                    "description": "Routing state of connection",
                    "enum": [
                        "none",
                        "request",
                        "active",
                        "error"
                    ],
                    "type": "string",
                    "example": "active"
                },
                "state": {
                    "description": "Current record state",
                    "type": "string",
                    "example": "active"
                },
                "their_did": {
                    "description": "Their DID for connection",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "their_label": {
                    "description": "Their label for connection",
                    "type": "string",
                    "example": "Bob"
                },
                "their_public_did": {
                    "description": "Other agent's public DID for connection",
                    "type": "string",
                    "example": "2cpBmR3FqGKWi5EyUbpRY8"
                },
                "their_role": {
                    "description": "Their role in the connection protocol",
                    "enum": [
                        "invitee",
                        "requester",
                        "inviter",
                        "responder"
                    ],
                    "type": "string",
                    "example": "requester"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "ConnectionInvitation": {
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "did": {
                    "description": "DID for connection invitation",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "imageUrl": {
                    "format": "url",
                    "description": "Optional image URL for connection invitation",
                    "type": "string",
                    "example": "http://192.168.56.101/img/logo.jpg",
                    "x-nullable": true
                },
                "label": {
                    "description": "Optional label for connection invitation",
                    "type": "string",
                    "example": "Bob"
                },
                "recipientKeys": {
                    "description": "List of recipient keys",
                    "type": "array",
                    "items": {
                        "description": "Recipient public key",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                        "type": "string",
                        "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    }
                },
                "routingKeys": {
                    "description": "List of routing keys",
                    "type": "array",
                    "items": {
                        "description": "Routing key",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                        "type": "string",
                        "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    }
                },
                "serviceEndpoint": {
                    "description": "Service endpoint at which to reach this agent",
                    "type": "string",
                    "example": "http://192.168.56.101:8020"
                }
            }
        },
        "ConnectionList": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "List of connection records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConnRecord"
                    }
                }
            }
        },
        "ConnectionMetadata": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "Dictionary of metadata associated with connection.",
                    "type": "object"
                }
            }
        },
        "ConnectionMetadataSetRequest": {
            "required": [
                "metadata"
            ],
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Dictionary of metadata to set for connection.",
                    "type": "object"
                }
            },
            "example": {
                "metadata": {}
            }
        },
        "ConnectionModuleResponse": {
            "type": "object"
        },
        "ConnectionStaticRequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Alias to assign to this connection",
                    "type": "string"
                },
                "my_did": {
                    "description": "Local DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "my_seed": {
                    "description": "Seed to use for the local DID",
                    "type": "string"
                },
                "their_did": {
                    "description": "Remote DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "their_endpoint": {
                    "description": "URL endpoint for other party",
                    "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                    "type": "string",
                    "example": "https://myhost:8021"
                },
                "their_label": {
                    "description": "Other party's label for this connection",
                    "type": "string"
                },
                "their_seed": {
                    "description": "Seed to use for the remote DID",
                    "type": "string"
                },
                "their_verkey": {
                    "description": "Remote verification key",
                    "type": "string"
                }
            },
            "example": {
                "alias": "string",
                "my_did": "WgWxqztrNooG92RXvxSTWv",
                "my_seed": "string",
                "their_did": "WgWxqztrNooG92RXvxSTWv",
                "their_endpoint": "https://myhost:8021",
                "their_label": "string",
                "their_seed": "string",
                "their_verkey": "string"
            }
        },
        "ConnectionStaticResult": {
            "required": [
                "mv_verkey",
                "my_did",
                "my_endpoint",
                "record",
                "their_did",
                "their_verkey"
            ],
            "type": "object",
            "properties": {
                "mv_verkey": {
                    "description": "My verification key",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                    "type": "string",
                    "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                },
                "my_did": {
                    "description": "Local DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "my_endpoint": {
                    "description": "My URL endpoint",
                    "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                    "type": "string",
                    "example": "https://myhost:8021"
                },
                "record": {
                    "$ref": "#/definitions/ConnRecord"
                },
                "their_did": {
                    "description": "Remote DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "their_verkey": {
                    "description": "Remote verification key",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                    "type": "string",
                    "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                }
            }
        },
        "Constraints": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DIFField"
                    }
                },
                "is_holder": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DIFHolder"
                    }
                },
                "limit_disclosure": {
                    "description": "LimitDisclosure",
                    "type": "string"
                },
                "status_active": {
                    "enum": [
                        "required",
                        "allowed",
                        "disallowed"
                    ],
                    "type": "string"
                },
                "status_revoked": {
                    "enum": [
                        "required",
                        "allowed",
                        "disallowed"
                    ],
                    "type": "string"
                },
                "status_suspended": {
                    "enum": [
                        "required",
                        "allowed",
                        "disallowed"
                    ],
                    "type": "string"
                },
                "subject_is_issuer": {
                    "description": "SubjectIsIssuer",
                    "enum": [
                        "required",
                        "preferred"
                    ],
                    "type": "string"
                }
            }
        },
        "CreateInvitationRequest": {
            "type": "object",
            "properties": {
                "mediation_id": {
                    "description": "Identifier for active mediation record to be used",
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "metadata": {
                    "description": "Optional metadata to attach to the connection created with the invitation",
                    "type": "object"
                },
                "my_label": {
                    "description": "Optional label for connection invitation",
                    "type": "string",
                    "example": "Bob"
                },
                "recipient_keys": {
                    "description": "List of recipient keys",
                    "type": "array",
                    "items": {
                        "description": "Recipient public key",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                        "type": "string",
                        "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    }
                },
                "routing_keys": {
                    "description": "List of routing keys",
                    "type": "array",
                    "items": {
                        "description": "Routing key",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                        "type": "string",
                        "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    }
                },
                "service_endpoint": {
                    "description": "Connection endpoint",
                    "type": "string",
                    "example": "http://192.168.56.102:8020"
                }
            },
            "example": {
                "mediation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "metadata": {},
                "my_label": "Bob",
                "recipient_keys": [
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                ],
                "routing_keys": [
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                ],
                "service_endpoint": "http://192.168.56.102:8020"
            }
        },
        "CreateWalletRequest": {
            "type": "object",
            "properties": {
                "image_url": {
                    "description": "Image url for this wallet. This image url is publicized            (self-attested) to other agents as part of forming a connection.",
                    "type": "string",
                    "example": "https://aries.ca/images/sample.png"
                },
                "key_management_mode": {
                    "description": "Key management method to use for this wallet.",
                    "enum": [
                        "managed"
                    ],
                    "type": "string",
                    "example": "managed"
                },
                "label": {
                    "description": "Label for this wallet. This label is publicized            (self-attested) to other agents as part of forming a connection.",
                    "type": "string",
                    "example": "Alice"
                },
                "wallet_dispatch_type": {
                    "description": "Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.",
                    "enum": [
                        "default",
                        "both",
                        "base"
                    ],
                    "type": "string",
                    "example": "default"
                },
                "wallet_key": {
                    "description": "Master key used for key derivation.",
                    "type": "string",
                    "example": "MySecretKey123"
                },
                "wallet_name": {
                    "description": "Wallet name",
                    "type": "string",
                    "example": "MyNewWallet"
                },
                "wallet_type": {
                    "description": "Type of the wallet to create",
                    "enum": [
                        "askar",
                        "in_memory",
                        "indy"
                    ],
                    "type": "string",
                    "example": "indy"
                },
                "wallet_webhook_urls": {
                    "description": "List of Webhook URLs associated with this subwallet",
                    "type": "array",
                    "items": {
                        "description": "Optional webhook URL to receive webhook messages",
                        "type": "string",
                        "example": "http://localhost:8022/webhooks"
                    }
                }
            }
        },
        "CreateWalletResponse": {
            "required": [
                "key_management_mode",
                "wallet_id"
            ],
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "key_management_mode": {
                    "description": "Mode regarding management of wallet key",
                    "enum": [
                        "managed",
                        "unmanaged"
                    ],
                    "type": "string"
                },
                "settings": {
                    "description": "Settings for this wallet.",
                    "type": "object"
                },
                "state": {
                    "description": "Current record state",
                    "type": "string",
                    "example": "active"
                },
                "token": {
                    "description": "Authorization token to authenticate wallet requests",
                    "type": "string",
                    "example": "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "wallet_id": {
                    "description": "Wallet record ID",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
            }
        },
        "CreateWalletTokenRequest": {
            "type": "object",
            "properties": {
                "wallet_key": {
                    "description": "Master key used for key derivation. Only required for             unamanged wallets.",
                    "type": "string",
                    "example": "MySecretKey123"
                }
            }
        },
        "CreateWalletTokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "Authorization token to authenticate wallet requests",
                    "type": "string",
                    "example": "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
                }
            }
        },
        "CredAttrSpec": {
            "required": [
                "name",
                "value"
            ],
            "type": "object",
            "properties": {
                "mime-type": {
                    "description": "MIME type: omit for (null) default",
                    "type": "string",
                    "example": "image/jpeg",
                    "x-nullable": true
                },
                "name": {
                    "description": "Attribute name",
                    "type": "string",
                    "example": "favourite_drink"
                },
                "value": {
                    "description": "Attribute value: base64-encode if MIME type is present",
                    "type": "string",
                    "example": "martini"
                }
            }
        },
        "CredDefValue": {
            "type": "object",
            "properties": {
                "primary": {
                    "$ref": "#/definitions/CredDefValue_primary"
                },
                "revocation": {
                    "$ref": "#/definitions/CredDefValue_revocation"
                }
            }
        },
        "CredDefValuePrimary": {
            "type": "object",
            "properties": {
                "n": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "r": {
                    "$ref": "#/definitions/Generated"
                },
                "rctxt": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "s": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "z": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                }
            }
        },
        "CredDefValueRevocation": {
            "type": "object",
            "properties": {
                "g": {
                    "type": "string",
                    "example": "1 1F14F&ECB578F 2 095E45DDF417D"
                },
                "g_dash": {
                    "type": "string",
                    "example": "1 1D64716fCDC00C 1 0C781960FA66E3D3 2 095E45DDF417D"
                },
                "h": {
                    "type": "string",
                    "example": "1 16675DAE54BFAE8 2 095E45DD417D"
                },
                "h0": {
                    "type": "string",
                    "example": "1 21E5EF9476EAF18 2 095E45DDF417D"
                },
                "h1": {
                    "type": "string",
                    "example": "1 236D1D99236090 2 095E45DDF417D"
                },
                "h2": {
                    "type": "string",
                    "example": "1 1C3AE8D1F1E277 2 095E45DDF417D"
                },
                "h_cap": {
                    "type": "string",
                    "example": "1 1B2A32CF3167 1 2490FEBF6EE55 1 0000000000000000"
                },
                "htilde": {
                    "type": "string",
                    "example": "1 1D8549E8C0F8 2 095E45DDF417D"
                },
                "pk": {
                    "type": "string",
                    "example": "1 142CD5E5A7DC 1 153885BD903312 2 095E45DDF417D"
                },
                "u": {
                    "type": "string",
                    "example": "1 0C430AAB2B4710 1 1CB3A0932EE7E 1 0000000000000000"
                },
                "y": {
                    "type": "string",
                    "example": "1 153558BD903312 2 095E45DDF417D 1 0000000000000000"
                }
            }
        },
        "CredInfoList": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IndyCredInfo"
                    }
                }
            }
        },
        "CredRevRecordResult": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/IssuerCredRevRecord"
                }
            }
        },
        "CredRevokedResult": {
            "type": "object",
            "properties": {
                "revoked": {
                    "description": "Whether credential is revoked on the ledger",
                    "type": "boolean"
                }
            }
        },
        "Credential": {
            "required": [
                "@context",
                "credentialSubject",
                "issuanceDate",
                "issuer",
                "type"
            ],
            "type": "object",
            "properties": {
                "@context": {
                    "description": "The JSON-LD context of the credential",
                    "type": "array",
                    "items": {},
                    "example": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://www.w3.org/2018/credentials/examples/v1"
                    ]
                },
                "credentialSubject": {
                    "example": ""
                },
                "expirationDate": {
                    "description": "The expiration date",
                    "pattern": "^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$",
                    "type": "string",
                    "example": "2010-01-01T19:23:24Z"
                },
                "id": {
                    "pattern": "\\w+:(\\/?\\/?)[^\\s]+",
                    "type": "string",
                    "example": "http://example.edu/credentials/1872"
                },
                "issuanceDate": {
                    "description": "The issuance date",
                    "pattern": "^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$",
                    "type": "string",
                    "example": "2010-01-01T19:23:24Z"
                },
                "issuer": {
                    "description": "The JSON-LD Verifiable Credential Issuer. Either string of object with id field.",
                    "example": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                },
                "proof": {
                    "$ref": "#/definitions/Credential_proof"
                },
                "type": {
                    "description": "The JSON-LD type of the credential",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "VerifiableCredential",
                        "AlumniCredential"
                    ]
                }
            }
        },
        "CredentialDefinition": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "schemaId": {
                    "description": "Schema identifier within credential definition identifier",
                    "type": "string",
                    "example": "20"
                },
                "tag": {
                    "description": "Tag within credential definition identifier",
                    "type": "string",
                    "example": "tag"
                },
                "type": {
                    "description": "Signature type: CL for Camenisch-Lysyanskaya",
                    "example": "CL"
                },
                "value": {
                    "$ref": "#/definitions/CredentialDefinition_value"
                },
                "ver": {
                    "description": "Node protocol version",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                }
            }
        },
        "CredentialDefinitionGetResult": {
            "type": "object",
            "properties": {
                "credential_definition": {
                    "$ref": "#/definitions/CredentialDefinition"
                }
            }
        },
        "CredentialDefinitionSendRequest": {
            "type": "object",
            "properties": {
                "revocation_registry_size": {
                    "format": "int32",
                    "description": "Revocation registry size",
                    "maximum": 32768,
                    "minimum": 4,
                    "type": "integer",
                    "example": 1000
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "support_revocation": {
                    "description": "Revocation supported flag",
                    "type": "boolean"
                },
                "tag": {
                    "description": "Credential definition identifier tag",
                    "type": "string",
                    "example": "default"
                }
            },
            "example": {
                "revocation_registry_size": 1000,
                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                "support_revocation": true,
                "tag": "default"
            }
        },
        "CredentialDefinitionSendResult": {
            "type": "object",
            "properties": {
                "credential_definition_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                }
            }
        },
        "CredentialDefinitionsCreatedResult": {
            "type": "object",
            "properties": {
                "credential_definition_ids": {
                    "type": "array",
                    "items": {
                        "description": "Credential definition identifiers",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                        "type": "string",
                        "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                    }
                }
            }
        },
        "CredentialOffer": {
            "required": [
                "offers~attach"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "credential_preview": {
                    "$ref": "#/definitions/CredentialPreview"
                },
                "offers~attach": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                }
            }
        },
        "CredentialPreview": {
            "required": [
                "attributes"
            ],
            "type": "object",
            "properties": {
                "@type": {
                    "description": "Message type identifier",
                    "type": "string",
                    "example": "issue-credential/1.0/credential-preview"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CredAttrSpec"
                    }
                }
            }
        },
        "CredentialProposal": {
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "cred_def_id": {
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "credential_proposal": {
                    "$ref": "#/definitions/CredentialPreview"
                },
                "issuer_did": {
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_id": {
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "schema_issuer_did": {
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_name": {
                    "type": "string"
                },
                "schema_version": {
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                }
            }
        },
        "CredentialStatusOptions": {
            "required": [
                "type"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "Credential status method type to use for the credential. Should match status method registered in the Verifiable Credential Extension Registry",
                    "type": "string",
                    "example": "CredentialStatusList2017"
                }
            }
        },
        "DID": {
            "type": "object",
            "properties": {
                "did": {
                    "description": "DID of interest",
                    "pattern": "^did:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$|^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "key_type": {
                    "description": "Key type associated with the DID",
                    "enum": [
                        "ed25519",
                        "bls12381g2"
                    ],
                    "type": "string",
                    "example": "ed25519"
                },
                "method": {
                    "description": "Did method associated with the DID",
                    "enum": [
                        "sov",
                        "key"
                    ],
                    "type": "string",
                    "example": "sov"
                },
                "posture": {
                    "description": "Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet",
                    "enum": [
                        "public",
                        "posted",
                        "wallet_only"
                    ],
                    "type": "string",
                    "example": "wallet_only"
                },
                "verkey": {
                    "description": "Public verification key",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                    "type": "string",
                    "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                }
            }
        },
        "DIDCreate": {
            "type": "object",
            "properties": {
                "method": {
                    "enum": [
                        "key",
                        "sov"
                    ],
                    "type": "string",
                    "example": "sov"
                },
                "options": {
                    "$ref": "#/definitions/DIDCreate_options"
                }
            },
            "example": {
                "method": "sov",
                "options": {}
            }
        },
        "DIDCreateOptions": {
            "required": [
                "key_type"
            ],
            "type": "object",
            "properties": {
                "key_type": {
                    "enum": [
                        "ed25519",
                        "bls12381g2"
                    ],
                    "type": "string",
                    "example": "ed25519"
                }
            }
        },
        "DIDEndpoint": {
            "required": [
                "did"
            ],
            "type": "object",
            "properties": {
                "did": {
                    "description": "DID of interest",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "endpoint": {
                    "description": "Endpoint to set (omit to delete)",
                    "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                    "type": "string",
                    "example": "https://myhost:8021"
                }
            }
        },
        "DIDEndpointWithType": {
            "required": [
                "did"
            ],
            "type": "object",
            "properties": {
                "did": {
                    "description": "DID of interest",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "endpoint": {
                    "description": "Endpoint to set (omit to delete)",
                    "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                    "type": "string",
                    "example": "https://myhost:8021"
                },
                "endpoint_type": {
                    "description": "Endpoint type to set (default 'Endpoint'); affects only public or posted DIDs",
                    "enum": [
                        "Endpoint",
                        "Profile",
                        "LinkedDomains"
                    ],
                    "type": "string",
                    "example": "Endpoint"
                }
            },
            "example": {
                "did": "WgWxqztrNooG92RXvxSTWv",
                "endpoint": "https://myhost:8021",
                "endpoint_type": "Endpoint"
            }
        },
        "DIDList": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "DID list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DID"
                    }
                }
            }
        },
        "DIDResult": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/DID"
                }
            }
        },
        "DIDXRequest": {
            "required": [
                "label"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "did": {
                    "description": "DID of exchange",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "did_doc~attach": {
                    "$ref": "#/definitions/DIDXRequest_did_docattach"
                },
                "label": {
                    "description": "Label for DID exchange request",
                    "type": "string",
                    "example": "Request to connect with Bob"
                }
            },
            "example": {
                "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                "did": "WgWxqztrNooG92RXvxSTWv",
                "did_doc~attach": {},
                "label": "Request to connect with Bob"
            }
        },
        "DIFField": {
            "type": "object",
            "properties": {
                "filter": {
                    "$ref": "#/definitions/Filter"
                },
                "id": {
                    "description": "ID",
                    "type": "string"
                },
                "path": {
                    "type": "array",
                    "items": {
                        "description": "Path",
                        "type": "string"
                    }
                },
                "predicate": {
                    "description": "Preference",
                    "enum": [
                        "required",
                        "preferred"
                    ],
                    "type": "string"
                },
                "purpose": {
                    "description": "Purpose",
                    "type": "string"
                }
            }
        },
        "DIFHolder": {
            "type": "object",
            "properties": {
                "directive": {
                    "description": "Preference",
                    "enum": [
                        "required",
                        "preferred"
                    ],
                    "type": "string"
                },
                "field_id": {
                    "type": "array",
                    "items": {
                        "description": "FieldID",
                        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                        "type": "string",
                        "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    }
                }
            }
        },
        "DIFOptions": {
            "type": "object",
            "properties": {
                "challenge": {
                    "description": "Challenge protect against replay attack",
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "domain": {
                    "description": "Domain protect against replay attack",
                    "type": "string",
                    "example": "4jt78h47fh47"
                }
            }
        },
        "DIFPresSpec": {
            "type": "object",
            "properties": {
                "issuer_id": {
                    "description": "Issuer identifier to sign the presentation, if different from current public DID",
                    "type": "string"
                },
                "presentation_definition": {
                    "$ref": "#/definitions/PresentationDefinition"
                },
                "record_ids": {
                    "description": "Mapping of input_descriptor id to list of stored W3C credential record_id",
                    "type": "object",
                    "example": {
                        "<input descriptor id_1>": [
                            "<record id_1>",
                            "<record id_2>"
                        ],
                        "<input descriptor id_2>": [
                            "<record id>"
                        ]
                    }
                },
                "reveal_doc": {
                    "description": "reveal doc [JSON-LD frame] dict used to derive the credential when selective disclosure is required",
                    "type": "object",
                    "example": {
                        "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/bbs/v1"
                        ],
                        "type": [
                            "VerifiableCredential",
                            "LabReport"
                        ],
                        "@explicit": true,
                        "@requireAll": true,
                        "issuanceDate": {},
                        "issuer": {},
                        "credentialSubject": {
                            "Observation": [
                                {
                                    "effectiveDateTime": {},
                                    "@explicit": true,
                                    "@requireAll": true
                                }
                            ],
                            "@explicit": true,
                            "@requireAll": true
                        }
                    }
                }
            }
        },
        "DIFProofProposal": {
            "type": "object",
            "properties": {
                "input_descriptors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InputDescriptors"
                    }
                }
            }
        },
        "DIFProofRequest": {
            "required": [
                "presentation_definition"
            ],
            "type": "object",
            "properties": {
                "options": {
                    "$ref": "#/definitions/DIFOptions"
                },
                "presentation_definition": {
                    "$ref": "#/definitions/PresentationDefinition"
                }
            }
        },
        "Date": {
            "required": [
                "expires_time"
            ],
            "type": "object",
            "properties": {
                "expires_time": {
                    "format": "date-time",
                    "description": "Expiry Date",
                    "type": "string",
                    "example": "2021-03-29T05:22:19+00:00"
                }
            },
            "example": {
                "expires_time": "2021-03-29T05:22:19+00:00"
            }
        },
        "Doc": {
            "required": [
                "credential",
                "options"
            ],
            "type": "object",
            "properties": {
                "credential": {
                    "description": "Credential to sign",
                    "type": "object"
                },
                "options": {
                    "$ref": "#/definitions/Doc_options"
                }
            }
        },
        "EndorserInfo": {
            "required": [
                "endorser_did"
            ],
            "type": "object",
            "properties": {
                "endorser_did": {
                    "description": "Endorser DID",
                    "type": "string"
                },
                "endorser_name": {
                    "description": "Endorser Name",
                    "type": "string"
                }
            }
        },
        "EndpointsResult": {
            "type": "object",
            "properties": {
                "my_endpoint": {
                    "description": "My endpoint",
                    "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                    "type": "string",
                    "example": "https://myhost:8021"
                },
                "their_endpoint": {
                    "description": "Their endpoint",
                    "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                    "type": "string",
                    "example": "https://myhost:8021"
                }
            }
        },
        "Filter": {
            "type": "object",
            "properties": {
                "const": {
                    "description": "Const"
                },
                "enum": {
                    "type": "array",
                    "items": {
                        "description": "Enum"
                    }
                },
                "exclusiveMaximum": {
                    "description": "ExclusiveMaximum"
                },
                "exclusiveMinimum": {
                    "description": "ExclusiveMinimum"
                },
                "format": {
                    "description": "Format",
                    "type": "string"
                },
                "maxLength": {
                    "format": "int32",
                    "description": "Max Length",
                    "type": "integer",
                    "example": 1234
                },
                "maximum": {
                    "description": "Maximum"
                },
                "minLength": {
                    "format": "int32",
                    "description": "Min Length",
                    "type": "integer",
                    "example": 1234
                },
                "minimum": {
                    "description": "Minimum"
                },
                "not": {
                    "description": "Not",
                    "type": "boolean",
                    "example": false
                },
                "pattern": {
                    "description": "Pattern",
                    "type": "string"
                },
                "type": {
                    "description": "Type",
                    "type": "string"
                }
            }
        },
        "Generated": {
            "type": "object",
            "properties": {
                "master_secret": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "number": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "remainder": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                }
            }
        },
        "GetDIDEndpointResponse": {
            "type": "object",
            "properties": {
                "endpoint": {
                    "description": "Full verification key",
                    "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                    "type": "string",
                    "example": "https://myhost:8021",
                    "x-nullable": true
                }
            }
        },
        "GetDIDVerkeyResponse": {
            "type": "object",
            "properties": {
                "verkey": {
                    "description": "Full verification key",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                    "type": "string",
                    "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "x-nullable": true
                }
            }
        },
        "GetNymRoleResponse": {
            "type": "object",
            "properties": {
                "role": {
                    "description": "Ledger role",
                    "enum": [
                        "STEWARD",
                        "TRUSTEE",
                        "ENDORSER",
                        "NETWORK_MONITOR",
                        "USER",
                        "ROLE_REMOVE"
                    ],
                    "type": "string",
                    "example": "ENDORSER"
                }
            }
        },
        "HolderModuleResponse": {
            "type": "object"
        },
        "IndyAttrValue": {
            "required": [
                "encoded",
                "raw"
            ],
            "type": "object",
            "properties": {
                "encoded": {
                    "description": "Attribute encoded value",
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "raw": {
                    "description": "Attribute raw value",
                    "type": "string"
                }
            }
        },
        "IndyCredAbstract": {
            "required": [
                "cred_def_id",
                "key_correctness_proof",
                "nonce",
                "schema_id"
            ],
            "type": "object",
            "properties": {
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "key_correctness_proof": {
                    "$ref": "#/definitions/IndyCredAbstract_key_correctness_proof"
                },
                "nonce": {
                    "description": "Nonce in credential abstract",
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                }
            }
        },
        "IndyCredInfo": {
            "type": "object",
            "properties": {
                "attrs": {
                    "description": "Attribute names and value",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "example": "alice"
                    }
                },
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "cred_rev_id": {
                    "description": "Credential revocation identifier",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "string",
                    "example": "12345",
                    "x-nullable": true
                },
                "referent": {
                    "description": "Wallet referent",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "rev_reg_id": {
                    "description": "Revocation registry identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "x-nullable": true
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                }
            }
        },
        "IndyCredPrecis": {
            "type": "object",
            "properties": {
                "cred_info": {
                    "$ref": "#/definitions/IndyCredPrecis_cred_info"
                },
                "interval": {
                    "$ref": "#/definitions/IndyCredPrecis_interval"
                },
                "presentation_referents": {
                    "type": "array",
                    "items": {
                        "description": "presentation referent",
                        "type": "string",
                        "example": "1_age_uuid"
                    }
                }
            }
        },
        "IndyCredRequest": {
            "required": [
                "blinded_ms",
                "blinded_ms_correctness_proof",
                "cred_def_id",
                "nonce"
            ],
            "type": "object",
            "properties": {
                "blinded_ms": {
                    "description": "Blinded master secret",
                    "type": "object"
                },
                "blinded_ms_correctness_proof": {
                    "description": "Blinded master secret correctness proof",
                    "type": "object"
                },
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "nonce": {
                    "description": "Nonce in credential request",
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "prover_did": {
                    "description": "Prover DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                }
            }
        },
        "IndyCredential": {
            "required": [
                "cred_def_id",
                "schema_id",
                "signature",
                "signature_correctness_proof",
                "values"
            ],
            "type": "object",
            "properties": {
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "rev_reg": {
                    "description": "Revocation registry state",
                    "type": "object",
                    "x-nullable": true
                },
                "rev_reg_id": {
                    "description": "Revocation registry identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "x-nullable": true
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "signature": {
                    "description": "Credential signature",
                    "type": "object"
                },
                "signature_correctness_proof": {
                    "description": "Credential signature correctness proof",
                    "type": "object"
                },
                "values": {
                    "description": "Credential attributes",
                    "type": "object",
                    "additionalProperties": {
                        "description": "Attribute value",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/definitions/IndyAttrValue"
                            }
                        ]
                    }
                },
                "witness": {
                    "description": "Witness for revocation proof",
                    "type": "object",
                    "x-nullable": true
                }
            }
        },
        "IndyEQProof": {
            "type": "object",
            "properties": {
                "a_prime": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "e": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "m": {
                    "type": "object",
                    "additionalProperties": {
                        "pattern": "^[0-9]*$",
                        "type": "string",
                        "example": "0"
                    }
                },
                "m2": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "revealed_attrs": {
                    "type": "object",
                    "additionalProperties": {
                        "pattern": "^[0-9]*$",
                        "type": "string",
                        "example": "0"
                    }
                },
                "v": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                }
            }
        },
        "IndyGEProof": {
            "type": "object",
            "properties": {
                "alpha": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "mj": {
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "predicate": {
                    "$ref": "#/definitions/IndyGEProofPred"
                },
                "r": {
                    "type": "object",
                    "additionalProperties": {
                        "pattern": "^[0-9]*$",
                        "type": "string",
                        "example": "0"
                    }
                },
                "t": {
                    "type": "object",
                    "additionalProperties": {
                        "pattern": "^[0-9]*$",
                        "type": "string",
                        "example": "0"
                    }
                },
                "u": {
                    "type": "object",
                    "additionalProperties": {
                        "pattern": "^[0-9]*$",
                        "type": "string",
                        "example": "0"
                    }
                }
            }
        },
        "IndyGEProofPred": {
            "type": "object",
            "properties": {
                "attr_name": {
                    "description": "Attribute name, indy-canonicalized",
                    "type": "string"
                },
                "p_type": {
                    "description": "Predicate type",
                    "enum": [
                        "LT",
                        "LE",
                        "GE",
                        "GT"
                    ],
                    "type": "string"
                },
                "value": {
                    "format": "int32",
                    "description": "Predicate threshold value",
                    "type": "integer"
                }
            }
        },
        "IndyKeyCorrectnessProof": {
            "required": [
                "c",
                "xr_cap",
                "xz_cap"
            ],
            "type": "object",
            "properties": {
                "c": {
                    "description": "c in key correctness proof",
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "xr_cap": {
                    "description": "xr_cap in key correctness proof",
                    "type": "array",
                    "items": {
                        "description": "xr_cap components in key correctness proof",
                        "type": "array",
                        "items": {
                            "description": "xr_cap component values in key correctness proof",
                            "type": "string"
                        }
                    }
                },
                "xz_cap": {
                    "description": "xz_cap in key correctness proof",
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                }
            }
        },
        "IndyNonRevocProof": {
            "type": "object",
            "properties": {
                "c_list": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "x_list": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "IndyNonRevocationInterval": {
            "type": "object",
            "properties": {
                "from": {
                    "format": "int32",
                    "description": "Earliest time of interest in non-revocation interval",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                },
                "to": {
                    "format": "int32",
                    "description": "Latest time of interest in non-revocation interval",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                }
            }
        },
        "IndyPresAttrSpec": {
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "cred_def_id": {
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "mime-type": {
                    "description": "MIME type (default null)",
                    "type": "string",
                    "example": "image/jpeg"
                },
                "name": {
                    "description": "Attribute name",
                    "type": "string",
                    "example": "favourite_drink"
                },
                "referent": {
                    "description": "Credential referent",
                    "type": "string",
                    "example": "0"
                },
                "value": {
                    "description": "Attribute value",
                    "type": "string",
                    "example": "martini"
                }
            }
        },
        "IndyPresPredSpec": {
            "required": [
                "name",
                "predicate",
                "threshold"
            ],
            "type": "object",
            "properties": {
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "name": {
                    "description": "Attribute name",
                    "type": "string",
                    "example": "high_score"
                },
                "predicate": {
                    "description": "Predicate type ('<', '<=', '>=', or '>')",
                    "enum": [
                        "<",
                        "<=",
                        ">=",
                        ">"
                    ],
                    "type": "string",
                    "example": ">="
                },
                "threshold": {
                    "format": "int32",
                    "description": "Threshold value",
                    "type": "integer"
                }
            }
        },
        "IndyPresPreview": {
            "required": [
                "attributes",
                "predicates"
            ],
            "type": "object",
            "properties": {
                "@type": {
                    "description": "Message type identifier",
                    "type": "string",
                    "example": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation-preview"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IndyPresAttrSpec"
                    }
                },
                "predicates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IndyPresPredSpec"
                    }
                }
            }
        },
        "IndyPresSpec": {
            "required": [
                "requested_attributes",
                "requested_predicates",
                "self_attested_attributes"
            ],
            "type": "object",
            "properties": {
                "requested_attributes": {
                    "description": "Nested object mapping proof request attribute referents to requested-attribute specifiers",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/IndyRequestedCredsRequestedAttr"
                    }
                },
                "requested_predicates": {
                    "description": "Nested object mapping proof request predicate referents to requested-predicate specifiers",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/IndyRequestedCredsRequestedPred"
                    }
                },
                "self_attested_attributes": {
                    "description": "Self-attested attributes to build into proof",
                    "type": "object",
                    "additionalProperties": {
                        "description": "Self-attested attribute values to use in requested-credentials structure for proof construction",
                        "type": "string",
                        "example": "self_attested_value"
                    }
                },
                "trace": {
                    "description": "Whether to trace event (default false)",
                    "type": "boolean",
                    "example": false
                }
            },
            "example": {
                "requested_attributes": {},
                "requested_predicates": {},
                "self_attested_attributes": {},
                "trace": false
            }
        },
        "IndyPrimaryProof": {
            "type": "object",
            "properties": {
                "eq_proof": {
                    "$ref": "#/definitions/IndyPrimaryProof_eq_proof"
                },
                "ge_proofs": {
                    "description": "Indy GE proofs",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IndyGEProof"
                    },
                    "x-nullable": true
                }
            }
        },
        "IndyProof": {
            "type": "object",
            "properties": {
                "identifiers": {
                    "description": "Indy proof.identifiers content",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IndyProofIdentifier"
                    }
                },
                "proof": {
                    "$ref": "#/definitions/IndyProof_proof"
                },
                "requested_proof": {
                    "$ref": "#/definitions/IndyProof_requested_proof"
                }
            }
        },
        "IndyProofIdentifier": {
            "type": "object",
            "properties": {
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "rev_reg_id": {
                    "description": "Revocation registry identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "x-nullable": true
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "timestamp": {
                    "format": "int32",
                    "description": "Timestamp epoch",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199,
                    "x-nullable": true
                }
            }
        },
        "IndyProofProof": {
            "type": "object",
            "properties": {
                "aggregated_proof": {
                    "$ref": "#/definitions/IndyProofProof_aggregated_proof"
                },
                "proofs": {
                    "description": "Indy proof proofs",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IndyProofProofProofsProof"
                    }
                }
            }
        },
        "IndyProofProofAggregatedProof": {
            "type": "object",
            "properties": {
                "c_hash": {
                    "description": "c_hash value",
                    "type": "string"
                },
                "c_list": {
                    "description": "c_list value",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "IndyProofProofProofsProof": {
            "type": "object",
            "properties": {
                "non_revoc_proof": {
                    "$ref": "#/definitions/IndyProofProofProofsProof_non_revoc_proof"
                },
                "primary_proof": {
                    "$ref": "#/definitions/IndyProofProofProofsProof_primary_proof"
                }
            }
        },
        "IndyProofReqAttrSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Attribute name",
                    "type": "string",
                    "example": "favouriteDrink"
                },
                "names": {
                    "description": "Attribute name group",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "age"
                    }
                },
                "non_revoked": {
                    "$ref": "#/definitions/IndyProofReqAttrSpec_non_revoked"
                },
                "restrictions": {
                    "description": "If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        }
                    }
                }
            }
        },
        "IndyProofReqAttrSpecNonRevoked": {
            "type": "object",
            "properties": {
                "from": {
                    "format": "int32",
                    "description": "Earliest time of interest in non-revocation interval",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                },
                "to": {
                    "format": "int32",
                    "description": "Latest time of interest in non-revocation interval",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                }
            }
        },
        "IndyProofReqPredSpec": {
            "required": [
                "name",
                "p_type",
                "p_value"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "Attribute name",
                    "type": "string",
                    "example": "index"
                },
                "non_revoked": {
                    "$ref": "#/definitions/IndyProofReqAttrSpec_non_revoked"
                },
                "p_type": {
                    "description": "Predicate type ('<', '<=', '>=', or '>')",
                    "enum": [
                        "<",
                        "<=",
                        ">=",
                        ">"
                    ],
                    "type": "string",
                    "example": ">="
                },
                "p_value": {
                    "format": "int32",
                    "description": "Threshold value",
                    "type": "integer"
                },
                "restrictions": {
                    "description": "If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        }
                    }
                }
            }
        },
        "IndyProofReqPredSpecNonRevoked": {
            "type": "object",
            "properties": {
                "from": {
                    "format": "int32",
                    "description": "Earliest time of interest in non-revocation interval",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                },
                "to": {
                    "format": "int32",
                    "description": "Latest time of interest in non-revocation interval",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                }
            }
        },
        "IndyProofRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Proof request name",
                    "type": "string",
                    "example": "Proof request"
                },
                "non_revoked": {
                    "$ref": "#/definitions/IndyProofReqAttrSpec_non_revoked"
                },
                "nonce": {
                    "description": "Nonce",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "string",
                    "example": "1"
                },
                "requested_attributes": {
                    "description": "Requested attribute specifications of proof request",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/IndyProofReqAttrSpec"
                    }
                },
                "requested_predicates": {
                    "description": "Requested predicate specifications of proof request",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/IndyProofReqPredSpec"
                    }
                },
                "version": {
                    "description": "Proof request version",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                }
            }
        },
        "IndyProofRequestNonRevoked": {
            "type": "object",
            "properties": {
                "from": {
                    "format": "int32",
                    "description": "Earliest time of interest in non-revocation interval",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                },
                "to": {
                    "format": "int32",
                    "description": "Latest time of interest in non-revocation interval",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                }
            }
        },
        "IndyProofRequestedProof": {
            "type": "object",
            "properties": {
                "predicates": {
                    "description": "Proof requested proof predicates.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/IndyProofRequestedProofPredicate"
                    }
                },
                "revealed_attr_groups": {
                    "description": "Proof requested proof revealed attribute groups",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/IndyProofRequestedProofRevealedAttrGroup"
                    },
                    "x-nullable": true
                },
                "revealed_attrs": {
                    "description": "Proof requested proof revealed attributes",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/IndyProofRequestedProofRevealedAttr"
                    },
                    "x-nullable": true
                },
                "self_attested_attrs": {
                    "description": "Proof requested proof self-attested attributes",
                    "type": "object"
                },
                "unrevealed_attrs": {
                    "description": "Unrevealed attributes",
                    "type": "object"
                }
            }
        },
        "IndyProofRequestedProofPredicate": {
            "type": "object",
            "properties": {
                "sub_proof_index": {
                    "format": "int32",
                    "description": "Sub-proof index",
                    "type": "integer"
                }
            }
        },
        "IndyProofRequestedProofRevealedAttr": {
            "type": "object",
            "properties": {
                "encoded": {
                    "description": "Encoded value",
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "raw": {
                    "description": "Raw value",
                    "type": "string"
                },
                "sub_proof_index": {
                    "format": "int32",
                    "description": "Sub-proof index",
                    "type": "integer"
                }
            }
        },
        "IndyProofRequestedProofRevealedAttrGroup": {
            "type": "object",
            "properties": {
                "sub_proof_index": {
                    "format": "int32",
                    "description": "Sub-proof index",
                    "type": "integer"
                },
                "values": {
                    "description": "Indy proof requested proof revealed attr groups group value",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/RawEncoded"
                    }
                }
            }
        },
        "IndyRequestedCredsRequestedAttr": {
            "required": [
                "cred_id"
            ],
            "type": "object",
            "properties": {
                "cred_id": {
                    "description": "Wallet credential identifier (typically but not necessarily a UUID)",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "revealed": {
                    "description": "Whether to reveal attribute in proof (default true)",
                    "type": "boolean"
                }
            }
        },
        "IndyRequestedCredsRequestedPred": {
            "required": [
                "cred_id"
            ],
            "type": "object",
            "properties": {
                "cred_id": {
                    "description": "Wallet credential identifier (typically but not necessarily a UUID)",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "timestamp": {
                    "format": "int32",
                    "description": "Epoch timestamp of interest for non-revocation proof",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                }
            }
        },
        "IndyRevRegDef": {
            "type": "object",
            "properties": {
                "credDefId": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "id": {
                    "description": "Indy revocation registry identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
                },
                "revocDefType": {
                    "description": "Revocation registry type (specify CL_ACCUM)",
                    "enum": [
                        "CL_ACCUM"
                    ],
                    "type": "string",
                    "example": "CL_ACCUM"
                },
                "tag": {
                    "description": "Revocation registry tag",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/IndyRevRegDef_value"
                },
                "ver": {
                    "description": "Version of revocation registry definition",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                }
            }
        },
        "IndyRevRegDefValue": {
            "type": "object",
            "properties": {
                "issuanceType": {
                    "description": "Issuance type",
                    "enum": [
                        "ISSUANCE_ON_DEMAND",
                        "ISSUANCE_BY_DEFAULT"
                    ],
                    "type": "string"
                },
                "maxCredNum": {
                    "format": "int32",
                    "description": "Maximum number of credentials; registry size",
                    "minimum": 1,
                    "type": "integer",
                    "example": 10
                },
                "publicKeys": {
                    "$ref": "#/definitions/IndyRevRegDefValue_publicKeys"
                },
                "tailsHash": {
                    "description": "Tails hash value",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                    "type": "string",
                    "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                },
                "tailsLocation": {
                    "description": "Tails file location",
                    "type": "string"
                }
            }
        },
        "IndyRevRegDefValuePublicKeys": {
            "type": "object",
            "properties": {
                "accumKey": {
                    "$ref": "#/definitions/IndyRevRegDefValuePublicKeysAccumKey"
                }
            }
        },
        "IndyRevRegDefValuePublicKeysAccumKey": {
            "type": "object",
            "properties": {
                "z": {
                    "description": "Value for z",
                    "type": "string",
                    "example": "1 120F522F81E6B7 1 09F7A59005C4939854"
                }
            }
        },
        "IndyRevRegEntry": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/IndyRevRegEntry_value"
                },
                "ver": {
                    "description": "Version of revocation registry entry",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                }
            }
        },
        "IndyRevRegEntryValue": {
            "type": "object",
            "properties": {
                "accum": {
                    "description": "Accumulator value",
                    "type": "string",
                    "example": "21 11792B036AED0AAA12A4 4 298B2571FFC63A737"
                },
                "prevAccum": {
                    "description": "Previous accumulator value",
                    "type": "string",
                    "example": "21 137AC810975E4 6 76F0384B6F23"
                },
                "revoked": {
                    "description": "Revoked credential revocation identifiers",
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            }
        },
        "InputDescriptors": {
            "type": "object",
            "properties": {
                "constraints": {
                    "$ref": "#/definitions/Constraints"
                },
                "group": {
                    "type": "array",
                    "items": {
                        "description": "Group",
                        "type": "string"
                    }
                },
                "id": {
                    "description": "ID",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata dictionary",
                    "type": "object"
                },
                "name": {
                    "description": "Name",
                    "type": "string"
                },
                "purpose": {
                    "description": "Purpose",
                    "type": "string"
                }
            }
        },
        "IntroModuleResponse": {
            "type": "object"
        },
        "InvitationCreateRequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Alias for connection",
                    "type": "string",
                    "example": "Barry"
                },
                "attachments": {
                    "description": "Optional invitation attachments",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentDef"
                    }
                },
                "handshake_protocols": {
                    "type": "array",
                    "items": {
                        "description": "Handshake protocol to specify in invitation",
                        "type": "string",
                        "example": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0"
                    }
                },
                "accept": {
                    "type": "array",
                    "items": {
                        "description": "Mime type list in order of preference to be used in response",
                        "type": "string",
                        "example": "didcomm/aip1"
                    }
                },
                "mediation_id": {
                    "description": "Identifier for active mediation record to be used",
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "metadata": {
                    "description": "Optional metadata to attach to the connection created with the invitation",
                    "type": "object"
                },
                "my_label": {
                    "description": "Label for connection invitation",
                    "type": "string",
                    "example": "Invitation to Barry"
                },
                "use_public_did": {
                    "description": "Whether to use public DID in invitation",
                    "type": "boolean",
                    "example": false
                }
            },
            "example": {
                "alias": "Barry",
                "attachments": [
                    {
                        "id": "attachment-0",
                        "type": "present-proof"
                    }
                ],
                "handshake_protocols": [
                    "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0"
                ],
                "accept": [
                    "didcomm/aip1"
                ],
                "mediation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "metadata": {},
                "my_label": "Invitation to Barry",
                "use_public_did": false
            }
        },
        "InvitationMessage": {
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "handshake_protocols": {
                    "type": "array",
                    "items": {
                        "description": "Handshake protocol",
                        "type": "string",
                        "example": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0"
                    }
                },
                "accept": {
                    "type": "array",
                    "items": {
                        "description": "Mime type list in order of preference to be used in response",
                        "type": "string",
                        "example": "didcomm/aip1"
                    }
                },
                "label": {
                    "description": "Optional label",
                    "type": "string",
                    "example": "Bob"
                },
                "requests~attach": {
                    "description": "Optional request attachment",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "description": "Either a DIDComm service object (as per RFC0067) or a DID string."
                    },
                    "example": [
                        {
                            "did": "WgWxqztrNooG92RXvxSTWv",
                            "id": "string",
                            "recipientKeys": [
                                "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                            ],
                            "routingKeys": [
                                "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                            ],
                            "serviceEndpoint": "http://192.168.56.101:8020",
                            "type": "string"
                        },
                        "did:sov:WgWxqztrNooG92RXvxSTWv"
                    ]
                }
            },
            "example": {
                "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                "handshake_protocols": [
                    "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0"
                ],
                "accept": [
                    "didcomm/aip1"
                ],
                "label": "Bob",
                "requests~attach": [
                    {
                        "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "byte_count": 1234,
                        "data": {
                            "base64": "ey4uLn0=",
                            "json": "{\"sample\": \"content\"}",
                            "jws": {},
                            "links": [
                                "https://link.to/data"
                            ],
                            "sha256": "617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb"
                        },
                        "description": "view from doorway, facing east, with lights off",
                        "filename": "IMG1092348.png",
                        "lastmod_time": "2021-12-31 23:59:59Z",
                        "mime-type": "image/png"
                    }
                ],
                "services": [
                    {
                        "did": "WgWxqztrNooG92RXvxSTWv",
                        "id": "string",
                        "recipientKeys": [
                            "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                        ],
                        "routingKeys": [
                            "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                        ],
                        "serviceEndpoint": "http://192.168.56.101:8020",
                        "type": "string"
                    },
                    "did:sov:WgWxqztrNooG92RXvxSTWv"
                ]
            }
        },
        "InvitationRecord": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "invi_msg_id": {
                    "description": "Invitation message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "invitation": {
                    "$ref": "#/definitions/InvitationRecord_invitation"
                },
                "invitation_id": {
                    "description": "Invitation record identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "invitation_url": {
                    "description": "Invitation message URL",
                    "type": "string",
                    "example": "https://example.com/endpoint?c_i=eyJAdHlwZSI6ICIuLi4iLCAiLi4uIjogIi4uLiJ9XX0="
                },
                "state": {
                    "description": "Out of band message exchange state",
                    "type": "string",
                    "example": "await_response"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "InvitationResult": {
            "type": "object",
            "properties": {
                "connection_id": {
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "invitation": {
                    "$ref": "#/definitions/ConnectionInvitation"
                },
                "invitation_url": {
                    "description": "Invitation URL",
                    "type": "string",
                    "example": "http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ=="
                }
            }
        },
        "IssueCredentialModuleResponse": {
            "type": "object"
        },
        "IssuerCredRevRecord": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "cred_ex_id": {
                    "description": "Credential exchange record identifier at credential issue",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_rev_id": {
                    "description": "Credential revocation identifier",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "string",
                    "example": "12345"
                },
                "record_id": {
                    "description": "Issuer credential revocation record identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "rev_reg_id": {
                    "description": "Revocation registry identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
                },
                "state": {
                    "description": "Issue credential revocation record state",
                    "type": "string",
                    "example": "issued"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "IssuerRevRegRecord": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "error_msg": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Revocation registry undefined"
                },
                "issuer_did": {
                    "description": "Issuer DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "max_cred_num": {
                    "format": "int32",
                    "description": "Maximum number of credentials for revocation registry",
                    "type": "integer",
                    "example": 1000
                },
                "pending_pub": {
                    "description": "Credential revocation identifier for credential revoked and pending publication to ledger",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "23"
                    }
                },
                "record_id": {
                    "description": "Issuer revocation registry record identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "revoc_def_type": {
                    "description": "Revocation registry type (specify CL_ACCUM)",
                    "enum": [
                        "CL_ACCUM"
                    ],
                    "type": "string",
                    "example": "CL_ACCUM"
                },
                "revoc_reg_def": {
                    "$ref": "#/definitions/IssuerRevRegRecord_revoc_reg_def"
                },
                "revoc_reg_entry": {
                    "$ref": "#/definitions/IssuerRevRegRecord_revoc_reg_entry"
                },
                "revoc_reg_id": {
                    "description": "Revocation registry identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
                },
                "state": {
                    "description": "Issue revocation registry record state",
                    "type": "string",
                    "example": "active"
                },
                "tag": {
                    "description": "Tag within issuer revocation registry identifier",
                    "type": "string"
                },
                "tails_hash": {
                    "description": "Tails hash",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                    "type": "string",
                    "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                },
                "tails_local_path": {
                    "description": "Local path to tails file",
                    "type": "string"
                },
                "tails_public_uri": {
                    "description": "Public URI for tails file",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "Keylist": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "List of keylist records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RouteRecord"
                    }
                }
            }
        },
        "KeylistQuery": {
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "filter": {
                    "description": "Query dictionary object",
                    "type": "object",
                    "example": {
                        "filter": {}
                    }
                },
                "paginate": {
                    "$ref": "#/definitions/KeylistQuery_paginate"
                }
            }
        },
        "KeylistQueryFilterRequest": {
            "type": "object",
            "properties": {
                "filter": {
                    "description": "Filter for keylist query",
                    "type": "object"
                }
            }
        },
        "KeylistQueryPaginate": {
            "type": "object",
            "properties": {
                "limit": {
                    "format": "int32",
                    "description": "Limit for keylist query",
                    "type": "integer",
                    "example": 30
                },
                "offset": {
                    "format": "int32",
                    "description": "Offset value for query",
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "KeylistUpdate": {
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "updates": {
                    "description": "List of update rules",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeylistUpdateRule"
                    }
                }
            }
        },
        "KeylistUpdateRequest": {
            "type": "object",
            "properties": {
                "updates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeylistUpdateRule"
                    }
                }
            }
        },
        "KeylistUpdateRule": {
            "required": [
                "action",
                "recipient_key"
            ],
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action for specific key",
                    "enum": [
                        "add",
                        "remove"
                    ],
                    "type": "string",
                    "example": "add"
                },
                "recipient_key": {
                    "description": "Key to remove or add",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                    "type": "string",
                    "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                }
            }
        },
        "LDProofVCDetail": {
            "required": [
                "credential",
                "options"
            ],
            "type": "object",
            "properties": {
                "credential": {
                    "$ref": "#/definitions/LDProofVCDetail_credential"
                },
                "options": {
                    "$ref": "#/definitions/LDProofVCDetail_options"
                }
            }
        },
        "LDProofVCDetailOptions": {
            "required": [
                "proofType"
            ],
            "type": "object",
            "properties": {
                "challenge": {
                    "description": "A challenge to include in the proof. SHOULD be provided by the requesting party of the credential (=holder)",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "created": {
                    "description": "The date and time of the proof (with a maximum accuracy in seconds). Defaults to current system time",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "credentialStatus": {
                    "$ref": "#/definitions/LDProofVCDetailOptions_credentialStatus"
                },
                "domain": {
                    "description": "The intended domain of validity for the proof",
                    "type": "string",
                    "example": "example.com"
                },
                "proofPurpose": {
                    "description": "The proof purpose used for the proof. Should match proof purposes registered in the Linked Data Proofs Specification",
                    "type": "string",
                    "example": "assertionMethod"
                },
                "proofType": {
                    "description": "The proof type used for the proof. Should match suites registered in the Linked Data Cryptographic Suite Registry",
                    "type": "string",
                    "example": "Ed25519Signature2018"
                }
            }
        },
        "LedgerModulesResult": {
            "type": "object"
        },
        "LinkedDataProof": {
            "required": [
                "created",
                "proofPurpose",
                "type",
                "verificationMethod"
            ],
            "type": "object",
            "properties": {
                "challenge": {
                    "description": "Associates a challenge with a proof, for use with a proofPurpose such as authentication",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "created": {
                    "description": "The string value of an ISO8601 combined date and time string generated by the Signature Algorithm",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "domain": {
                    "description": "A string value specifying the restricted domain of the signature.",
                    "pattern": "\\w+:(\\/?\\/?)[^\\s]+",
                    "type": "string",
                    "example": "example.com"
                },
                "jws": {
                    "description": "Associates a Detached Json Web Signature with a proof",
                    "type": "string",
                    "example": "eyJhbGciOiAiRWREUc2UsICJjcml0IjogWyJiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQ1Ch6YBKY7UBAjg6iBX5qBQ"
                },
                "nonce": {
                    "description": "The nonce",
                    "type": "string",
                    "example": "CF69iO3nfvqRsRBNElE8b4wO39SyJHPM7Gg1nExltW5vSfQA1lvDCR/zXX1To0/4NLo=="
                },
                "proofPurpose": {
                    "description": "Proof purpose",
                    "type": "string",
                    "example": "assertionMethod"
                },
                "proofValue": {
                    "description": "The proof value of a proof",
                    "type": "string",
                    "example": "sy1AahqbzJQ63n9RtekmwzqZeVj494VppdAVJBnMYrTwft6cLJJGeTSSxCCJ6HKnRtwE7jjDh6sB2z2AAiZY9BBnCD8wUVgwqH3qchGRCuC2RugA4eQ9fUrR4Yuycac3caiaaay"
                },
                "type": {
                    "description": "Identifies the digital signature suite that was used to create the signature",
                    "type": "string",
                    "example": "Ed25519Signature2018"
                },
                "verificationMethod": {
                    "description": "Information used for proof verification",
                    "pattern": "\\w+:(\\/?\\/?)[^\\s]+",
                    "type": "string",
                    "example": "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL"
                }
            }
        },
        "MediationCreateRequest": {
            "type": "object",
            "properties": {
                "mediator_terms": {
                    "description": "List of mediator rules for recipient",
                    "type": "array",
                    "items": {
                        "description": "Indicate terms to which the mediator requires the recipient to agree",
                        "type": "string"
                    }
                },
                "recipient_terms": {
                    "description": "List of recipient rules for mediation",
                    "type": "array",
                    "items": {
                        "description": "Indicate terms to which the recipient requires the mediator to agree",
                        "type": "string"
                    }
                }
            }
        },
        "MediationDeny": {
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "mediator_terms": {
                    "type": "array",
                    "items": {
                        "description": "Terms for mediator to agree",
                        "type": "string"
                    }
                },
                "recipient_terms": {
                    "type": "array",
                    "items": {
                        "description": "Terms for recipient to agree",
                        "type": "string"
                    }
                }
            }
        },
        "MediationGrant": {
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "endpoint": {
                    "description": "endpoint on which messages destined for the recipient are received.",
                    "type": "string",
                    "example": "http://192.168.56.102:8020/"
                },
                "routing_keys": {
                    "type": "array",
                    "items": {
                        "description": "Keys to use for forward message packaging",
                        "type": "string"
                    }
                }
            }
        },
        "MediationList": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "List of mediation records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MediationRecord"
                    }
                }
            }
        },
        "MediationRecord": {
            "required": [
                "connection_id",
                "role"
            ],
            "type": "object",
            "properties": {
                "connection_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "endpoint": {
                    "type": "string"
                },
                "mediation_id": {
                    "type": "string"
                },
                "mediator_terms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient_terms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "role": {
                    "type": "string"
                },
                "routing_keys": {
                    "type": "array",
                    "items": {
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                        "type": "string",
                        "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    }
                },
                "state": {
                    "description": "Current record state",
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "Menu": {
            "required": [
                "options"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "description": {
                    "description": "Introductory text for the menu",
                    "type": "string",
                    "example": "This menu presents options"
                },
                "errormsg": {
                    "description": "An optional error message to display in menu header",
                    "type": "string",
                    "example": "Error: item not found"
                },
                "options": {
                    "description": "List of menu options",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MenuOption"
                    }
                },
                "title": {
                    "description": "Menu title",
                    "type": "string",
                    "example": "My Menu"
                }
            }
        },
        "MenuForm": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Additional descriptive text for menu form",
                    "type": "string",
                    "example": "Window preference settings"
                },
                "params": {
                    "description": "List of form parameters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MenuFormParam"
                    }
                },
                "submit-label": {
                    "description": "Alternative label for form submit button",
                    "type": "string",
                    "example": "Send"
                },
                "title": {
                    "description": "Menu form title",
                    "type": "string",
                    "example": "Preferences"
                }
            }
        },
        "MenuFormParam": {
            "required": [
                "name",
                "title"
            ],
            "type": "object",
            "properties": {
                "default": {
                    "description": "Default parameter value",
                    "type": "string",
                    "example": "0"
                },
                "description": {
                    "description": "Additional descriptive text for menu form parameter",
                    "type": "string",
                    "example": "Delay in seconds before starting"
                },
                "name": {
                    "description": "Menu parameter name",
                    "type": "string",
                    "example": "delay"
                },
                "required": {
                    "description": "Whether parameter is required",
                    "type": "boolean",
                    "example": false
                },
                "title": {
                    "description": "Menu parameter title",
                    "type": "string",
                    "example": "Delay in seconds"
                },
                "type": {
                    "description": "Menu form parameter input type",
                    "type": "string",
                    "example": "int"
                }
            }
        },
        "MenuJson": {
            "required": [
                "options"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "description": "Introductory text for the menu",
                    "type": "string",
                    "example": "User preferences for window settings"
                },
                "errormsg": {
                    "description": "Optional error message to display in menu header",
                    "type": "string",
                    "example": "Error: item not present"
                },
                "options": {
                    "description": "List of menu options",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MenuOption"
                    }
                },
                "title": {
                    "description": "Menu title",
                    "type": "string",
                    "example": "My Menu"
                }
            }
        },
        "MenuOption": {
            "required": [
                "name",
                "title"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "description": "Additional descriptive text for menu option",
                    "type": "string",
                    "example": "Window display preferences"
                },
                "disabled": {
                    "description": "Whether to show option as disabled",
                    "type": "boolean",
                    "example": false
                },
                "form": {
                    "$ref": "#/definitions/MenuForm"
                },
                "name": {
                    "description": "Menu option name (unique identifier)",
                    "type": "string",
                    "example": "window_prefs"
                },
                "title": {
                    "description": "Menu option title",
                    "type": "string",
                    "example": "Window Preferences"
                }
            }
        },
        "MultitenantModuleResponse": {
            "type": "object"
        },
        "PerformRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Menu option name",
                    "type": "string",
                    "example": "Query"
                },
                "params": {
                    "description": "Input parameter values",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    }
                }
            }
        },
        "PingRequest": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Comment for the ping message",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "example": {
                "comment": "string"
            }
        },
        "PingRequestResponse": {
            "type": "object",
            "properties": {
                "thread_id": {
                    "description": "Thread ID of the ping message",
                    "type": "string"
                }
            }
        },
        "PresentationDefinition": {
            "type": "object",
            "properties": {
                "format": {
                    "$ref": "#/definitions/ClaimFormat"
                },
                "id": {
                    "description": "Unique Resource Identifier",
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "input_descriptors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InputDescriptors"
                    }
                },
                "name": {
                    "description": "Human-friendly name that describes what the presentation definition pertains to",
                    "type": "string"
                },
                "purpose": {
                    "description": "Describes the purpose for which the Presentation Definition's inputs are being requested",
                    "type": "string"
                },
                "submission_requirements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubmissionRequirements"
                    }
                }
            }
        },
        "PresentationProposal": {
            "required": [
                "presentation_proposal"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "presentation_proposal": {
                    "$ref": "#/definitions/IndyPresPreview"
                }
            }
        },
        "PresentationRequest": {
            "required": [
                "request_presentations~attach"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "request_presentations~attach": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                }
            }
        },
        "PublishRevocations": {
            "type": "object",
            "properties": {
                "rrid2crid": {
                    "description": "Credential revocation ids by revocation registry id",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "description": "Credential revocation identifier",
                            "pattern": "^[1-9][0-9]*$",
                            "type": "string",
                            "example": "12345"
                        }
                    }
                }
            },
            "example": {
                "rrid2crid": {}
            }
        },
        "QueryResult": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "Query results keyed by protocol",
                    "type": "object",
                    "additionalProperties": {
                        "description": "Protocol descriptor",
                        "type": "object"
                    }
                }
            }
        },
        "RawEncoded": {
            "type": "object",
            "properties": {
                "encoded": {
                    "description": "Encoded value",
                    "pattern": "^[0-9]*$",
                    "type": "string",
                    "example": "0"
                },
                "raw": {
                    "description": "Raw value",
                    "type": "string"
                }
            }
        },
        "ReceiveInvitationRequest": {
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "did": {
                    "description": "DID for connection invitation",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "imageUrl": {
                    "format": "url",
                    "description": "Optional image URL for connection invitation",
                    "type": "string",
                    "example": "http://192.168.56.101/img/logo.jpg",
                    "x-nullable": true
                },
                "label": {
                    "description": "Optional label for connection invitation",
                    "type": "string",
                    "example": "Bob"
                },
                "recipientKeys": {
                    "description": "List of recipient keys",
                    "type": "array",
                    "items": {
                        "description": "Recipient public key",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                        "type": "string",
                        "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    }
                },
                "routingKeys": {
                    "description": "List of routing keys",
                    "type": "array",
                    "items": {
                        "description": "Routing key",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
                        "type": "string",
                        "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    }
                },
                "serviceEndpoint": {
                    "description": "Service endpoint at which to reach this agent",
                    "type": "string",
                    "example": "http://192.168.56.101:8020"
                }
            },
            "example": {
                "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                "did": "WgWxqztrNooG92RXvxSTWv",
                "imageUrl": "http://192.168.56.101/img/logo.jpg",
                "label": "Bob",
                "recipientKeys": [
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                ],
                "routingKeys": [
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                ],
                "serviceEndpoint": "http://192.168.56.101:8020"
            }
        },
        "RegisterLedgerNymResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Success of nym registration operation",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "RemoveWalletRequest": {
            "type": "object",
            "properties": {
                "wallet_key": {
                    "description": "Master key used for key derivation. Only required for             unmanaged wallets.",
                    "type": "string",
                    "example": "MySecretKey123"
                }
            }
        },
        "ResolutionResult": {
            "required": [
                "did_doc",
                "metadata"
            ],
            "type": "object",
            "properties": {
                "did_doc": {
                    "description": "DID Document",
                    "type": "object"
                },
                "metadata": {
                    "description": "Resolution metadata",
                    "type": "object"
                }
            }
        },
        "RevRegCreateRequest": {
            "type": "object",
            "properties": {
                "credential_definition_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "max_cred_num": {
                    "format": "int32",
                    "description": "Revocation registry size",
                    "maximum": 32768,
                    "minimum": 4,
                    "type": "integer",
                    "example": 1000
                }
            },
            "example": {
                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "max_cred_num": 1000
            }
        },
        "RevRegIssuedResult": {
            "type": "object",
            "properties": {
                "result": {
                    "format": "int32",
                    "description": "Number of credentials issued against revocation registry",
                    "minimum": 0,
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "RevRegResult": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/IssuerRevRegRecord"
                }
            }
        },
        "RevRegUpdateTailsFileUri": {
            "required": [
                "tails_public_uri"
            ],
            "type": "object",
            "properties": {
                "tails_public_uri": {
                    "format": "url",
                    "description": "Public URI to the tails file",
                    "type": "string",
                    "example": "http://192.168.56.133:6543/revocation/registry/WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0/tails-file"
                }
            },
            "example": {
                "tails_public_uri": "http://192.168.56.133:6543/revocation/registry/WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0/tails-file"
            }
        },
        "RevRegsCreated": {
            "type": "object",
            "properties": {
                "rev_reg_ids": {
                    "type": "array",
                    "items": {
                        "description": "Revocation registry identifiers",
                        "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
                        "type": "string",
                        "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
                    }
                }
            }
        },
        "RevocationModuleResponse": {
            "type": "object"
        },
        "RevokeRequest": {
            "type": "object",
            "properties": {
                "cred_ex_id": {
                    "description": "Credential exchange identifier",
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_rev_id": {
                    "description": "Credential revocation identifier",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "string",
                    "example": "12345"
                },
                "publish": {
                    "description": "(True) publish revocation to ledger immediately, or (default, False) mark it pending",
                    "type": "boolean"
                },
                "rev_reg_id": {
                    "description": "Revocation registry identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
                }
            },
            "example": {
                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "cred_rev_id": "12345",
                "publish": true,
                "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
            }
        },
        "RouteRecord": {
            "required": [
                "recipient_key"
            ],
            "type": "object",
            "properties": {
                "connection_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "recipient_key": {
                    "type": "string"
                },
                "record_id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "state": {
                    "description": "Current record state",
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "Schema": {
            "type": "object",
            "properties": {
                "attrNames": {
                    "description": "Schema attribute names",
                    "type": "array",
                    "items": {
                        "description": "Attribute name",
                        "type": "string",
                        "example": "score"
                    }
                },
                "id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "name": {
                    "description": "Schema name",
                    "type": "string",
                    "example": "schema_name"
                },
                "seqNo": {
                    "format": "int32",
                    "description": "Schema sequence number",
                    "minimum": 1,
                    "type": "integer",
                    "example": 10
                },
                "ver": {
                    "description": "Node protocol version",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                },
                "version": {
                    "description": "Schema version",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                }
            }
        },
        "SchemaGetResult": {
            "type": "object",
            "properties": {
                "schema": {
                    "$ref": "#/definitions/Schema"
                }
            }
        },
        "SchemaInputDescriptor": {
            "type": "object",
            "properties": {
                "required": {
                    "description": "Required",
                    "type": "boolean"
                },
                "uri": {
                    "description": "URI",
                    "type": "string"
                }
            }
        },
        "SchemaSendRequest": {
            "required": [
                "attributes",
                "schema_name",
                "schema_version"
            ],
            "type": "object",
            "properties": {
                "attributes": {
                    "description": "List of schema attributes",
                    "type": "array",
                    "items": {
                        "description": "attribute name",
                        "type": "string",
                        "example": "score"
                    }
                },
                "schema_name": {
                    "description": "Schema name",
                    "type": "string",
                    "example": "prefs"
                },
                "schema_version": {
                    "description": "Schema version",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                }
            },
            "example": {
                "attributes": [
                    "score"
                ],
                "schema_name": "prefs",
                "schema_version": "1.0"
            }
        },
        "SchemaSendResult": {
            "required": [
                "schema_id"
            ],
            "type": "object",
            "properties": {
                "schema": {
                    "$ref": "#/definitions/SchemaSendResult_schema"
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                }
            }
        },
        "SchemasCreatedResult": {
            "type": "object",
            "properties": {
                "schema_ids": {
                    "type": "array",
                    "items": {
                        "description": "Schema identifiers",
                        "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                        "type": "string",
                        "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                    }
                }
            }
        },
        "SendMenu": {
            "required": [
                "menu"
            ],
            "type": "object",
            "properties": {
                "menu": {
                    "$ref": "#/definitions/SendMenu_menu"
                }
            }
        },
        "SendMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Message content",
                    "type": "string",
                    "example": "Hello"
                }
            },
            "example": {
                "content": "Hello"
            }
        },
        "SignRequest": {
            "required": [
                "doc",
                "verkey"
            ],
            "type": "object",
            "properties": {
                "doc": {
                    "$ref": "#/definitions/Doc"
                },
                "verkey": {
                    "description": "Verkey to use for signing",
                    "type": "string"
                }
            },
            "example": {
                "doc": {
                    "credential": {},
                    "options": {}
                },
                "verkey": "string"
            }
        },
        "SignResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error text",
                    "type": "string"
                },
                "signed_doc": {
                    "description": "Signed document",
                    "type": "object"
                }
            }
        },
        "SignatureOptions": {
            "required": [
                "proofPurpose",
                "verificationMethod"
            ],
            "type": "object",
            "properties": {
                "challenge": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "proofPurpose": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "verificationMethod": {
                    "type": "string"
                }
            }
        },
        "SignedDoc": {
            "required": [
                "proof"
            ],
            "type": "object",
            "properties": {
                "proof": {
                    "$ref": "#/definitions/SignedDoc_proof"
                }
            }
        },
        "SubmissionRequirements": {
            "type": "object",
            "properties": {
                "count": {
                    "format": "int32",
                    "description": "Count Value",
                    "type": "integer",
                    "example": 1234
                },
                "from": {
                    "description": "From",
                    "type": "string"
                },
                "from_nested": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubmissionRequirements"
                    }
                },
                "max": {
                    "format": "int32",
                    "description": "Max Value",
                    "type": "integer",
                    "example": 1234
                },
                "min": {
                    "format": "int32",
                    "description": "Min Value",
                    "type": "integer",
                    "example": 1234
                },
                "name": {
                    "description": "Name",
                    "type": "string"
                },
                "purpose": {
                    "description": "Purpose",
                    "type": "string"
                },
                "rule": {
                    "description": "Selection",
                    "enum": [
                        "all",
                        "pick"
                    ],
                    "type": "string"
                }
            }
        },
        "TAAAccept": {
            "type": "object",
            "properties": {
                "mechanism": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "TAAAcceptance": {
            "type": "object",
            "properties": {
                "mechanism": {
                    "type": "string"
                },
                "time": {
                    "format": "int32",
                    "maximum": 18446744073709552000,
                    "minimum": 0,
                    "type": "integer",
                    "example": 1640995199
                }
            }
        },
        "TAAInfo": {
            "type": "object",
            "properties": {
                "aml_record": {
                    "$ref": "#/definitions/AMLRecord"
                },
                "taa_accepted": {
                    "$ref": "#/definitions/TAAAcceptance"
                },
                "taa_record": {
                    "$ref": "#/definitions/TAARecord"
                },
                "taa_required": {
                    "type": "boolean"
                }
            }
        },
        "TAARecord": {
            "type": "object",
            "properties": {
                "digest": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "TAAResult": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/TAAInfo"
                }
            }
        },
        "TransactionJobs": {
            "type": "object",
            "properties": {
                "transaction_my_job": {
                    "description": "My transaction related job",
                    "enum": [
                        "TRANSACTION_AUTHOR",
                        "TRANSACTION_ENDORSER",
                        "reset"
                    ],
                    "type": "string"
                },
                "transaction_their_job": {
                    "description": "Their transaction related job",
                    "enum": [
                        "TRANSACTION_AUTHOR",
                        "TRANSACTION_ENDORSER",
                        "reset"
                    ],
                    "type": "string"
                }
            }
        },
        "TransactionList": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "List of transaction records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionRecord"
                    }
                }
            }
        },
        "TransactionRecord": {
            "type": "object",
            "properties": {
                "_type": {
                    "description": "Transaction type",
                    "type": "string",
                    "example": "101"
                },
                "connection_id": {
                    "description": "The connection identifier for thie particular transaction record",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "endorser_write_txn": {
                    "description": "If True, Endorser will write the transaction after endorsing it",
                    "type": "boolean",
                    "example": true
                },
                "formats": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            "format": "dif/endorse-transaction/request@v1.0"
                        }
                    }
                },
                "messages_attach": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "example": {
                            "@id": "143c458d-1b1c-40c7-ab85-4d16808ddf0a",
                            "data": {
                                "json": "{\"endorser\": \"V4SGRU86Z58d6TV7PBUe6f\",\"identifier\": \"LjgpST2rjsoxYegQDRm7EL\",\"operation\": {\"data\": {\"attr_names\": [\"first_name\", \"last_name\"],\"name\": \"test_schema\",\"version\": \"2.1\",},\"type\": \"101\",},\"protocolVersion\": 2,\"reqId\": 1597766666168851000,\"signatures\": {\"LjgpST2rjsox\": \"4ATKMn6Y9sTgwqaGTm7py2c2M8x1EVDTWKZArwyuPgjU\"},\"taaAcceptance\": {\"mechanism\": \"manual\",\"taaDigest\": \"f50fe2c2ab977006761d36bd6f23e4c6a7e0fc2feb9f62\",\"time\": 1597708800,}}"
                            },
                            "mime-type": "application/json"
                        }
                    }
                },
                "signature_request": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "example": {
                            "author_goal_code": "transaction.ledger.write",
                            "context": "did:sov",
                            "method": "add-signature",
                            "signature_type": "<requested signature type>",
                            "signer_goal_code": "transaction.endorse"
                        }
                    }
                },
                "signature_response": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "example": {
                            "context": "did:sov",
                            "message_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            "method": "add-signature",
                            "signer_goal_code": "transaction.refuse"
                        }
                    }
                },
                "state": {
                    "description": "Current record state",
                    "type": "string",
                    "example": "active"
                },
                "thread_id": {
                    "description": "Thread Identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "timing": {
                    "type": "object",
                    "example": {
                        "expires_time": "2020-12-13T17:29:06+00:00"
                    }
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                },
                "transaction_id": {
                    "description": "Transaction identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "TxnOrCredentialDefinitionSendResult": {
            "type": "object",
            "properties": {
                "sent": {
                    "$ref": "#/definitions/CredentialDefinitionSendResult"
                },
                "txn": {
                    "$ref": "#/definitions/TxnOrCredentialDefinitionSendResult_txn"
                }
            }
        },
        "TxnOrPublishRevocationsResult": {
            "type": "object",
            "properties": {
                "sent": {
                    "$ref": "#/definitions/PublishRevocations"
                },
                "txn": {
                    "$ref": "#/definitions/TxnOrPublishRevocationsResult_txn"
                }
            }
        },
        "TxnOrRevRegResult": {
            "type": "object",
            "properties": {
                "sent": {
                    "$ref": "#/definitions/RevRegResult"
                },
                "txn": {
                    "$ref": "#/definitions/TxnOrRevRegResult_txn"
                }
            }
        },
        "TxnOrSchemaSendResult": {
            "type": "object",
            "properties": {
                "sent": {
                    "$ref": "#/definitions/TxnOrSchemaSendResult_sent"
                },
                "txn": {
                    "$ref": "#/definitions/TxnOrSchemaSendResult_txn"
                }
            }
        },
        "UpdateWalletRequest": {
            "type": "object",
            "properties": {
                "image_url": {
                    "description": "Image url for this wallet. This image url is publicized            (self-attested) to other agents as part of forming a connection.",
                    "type": "string",
                    "example": "https://aries.ca/images/sample.png"
                },
                "label": {
                    "description": "Label for this wallet. This label is publicized            (self-attested) to other agents as part of forming a connection.",
                    "type": "string",
                    "example": "Alice"
                },
                "wallet_dispatch_type": {
                    "description": "Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.",
                    "enum": [
                        "default",
                        "both",
                        "base"
                    ],
                    "type": "string",
                    "example": "default"
                },
                "wallet_webhook_urls": {
                    "description": "List of Webhook URLs associated with this subwallet",
                    "type": "array",
                    "items": {
                        "description": "Optional webhook URL to receive webhook messages",
                        "type": "string",
                        "example": "http://localhost:8022/webhooks"
                    }
                }
            }
        },
        "V10CredentialBoundOfferRequest": {
            "type": "object",
            "properties": {
                "counter_proposal": {
                    "$ref": "#/definitions/V10CredentialBoundOfferRequest_counter_proposal"
                }
            },
            "example": {
                "counter_proposal": {}
            }
        },
        "V10CredentialConnFreeOfferRequest": {
            "required": [
                "cred_def_id",
                "credential_preview"
            ],
            "type": "object",
            "properties": {
                "auto_issue": {
                    "description": "Whether to respond automatically to credential requests, creating and issuing requested credentials",
                    "type": "boolean"
                },
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "credential_preview": {
                    "$ref": "#/definitions/CredentialPreview"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "auto_issue": true,
                "auto_remove": true,
                "comment": "string",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_preview": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                        {
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "value": "martini"
                        }
                    ]
                },
                "trace": true
            }
        },
        "V10CredentialCreate": {
            "required": [
                "credential_proposal"
            ],
            "type": "object",
            "properties": {
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "credential_proposal": {
                    "$ref": "#/definitions/CredentialPreview"
                },
                "issuer_did": {
                    "description": "Credential issuer DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "schema_issuer_did": {
                    "description": "Schema issuer DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_name": {
                    "description": "Schema name",
                    "type": "string",
                    "example": "preferences"
                },
                "schema_version": {
                    "description": "Schema version",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "auto_remove": true,
                "comment": "string",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_proposal": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                        {
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "value": "martini"
                        }
                    ]
                },
                "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                "schema_issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_name": "preferences",
                "schema_version": "1.0",
                "trace": true
            }
        },
        "V10CredentialExchange": {
            "type": "object",
            "properties": {
                "auto_issue": {
                    "description": "Issuer choice to issue to request in this credential exchange",
                    "type": "boolean",
                    "example": false
                },
                "auto_offer": {
                    "description": "Holder choice to accept offer in this credential exchange",
                    "type": "boolean",
                    "example": false
                },
                "auto_remove": {
                    "description": "Issuer choice to remove this credential exchange record when complete",
                    "type": "boolean",
                    "example": false
                },
                "connection_id": {
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "credential": {
                    "$ref": "#/definitions/V10CredentialExchange_credential"
                },
                "credential_definition_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "credential_exchange_id": {
                    "description": "Credential exchange identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "credential_id": {
                    "description": "Credential identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "credential_offer": {
                    "$ref": "#/definitions/V10CredentialExchange_credential_offer"
                },
                "credential_offer_dict": {
                    "$ref": "#/definitions/V10CredentialExchange_credential_offer_dict"
                },
                "credential_proposal_dict": {
                    "$ref": "#/definitions/V10CredentialExchange_credential_proposal_dict"
                },
                "credential_request": {
                    "$ref": "#/definitions/V10CredentialExchange_credential_request"
                },
                "credential_request_metadata": {
                    "description": "(Indy) credential request metadata",
                    "type": "object"
                },
                "error_msg": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Credential definition identifier is not set in proposal"
                },
                "initiator": {
                    "description": "Issue-credential exchange initiator: self or external",
                    "enum": [
                        "self",
                        "external"
                    ],
                    "type": "string",
                    "example": "self"
                },
                "parent_thread_id": {
                    "description": "Parent thread identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "raw_credential": {
                    "$ref": "#/definitions/V10CredentialExchange_raw_credential"
                },
                "revoc_reg_id": {
                    "description": "Revocation registry identifier",
                    "type": "string"
                },
                "revocation_id": {
                    "description": "Credential identifier within revocation registry",
                    "type": "string"
                },
                "role": {
                    "description": "Issue-credential exchange role: holder or issuer",
                    "enum": [
                        "holder",
                        "issuer"
                    ],
                    "type": "string",
                    "example": "issuer"
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "state": {
                    "description": "Issue-credential exchange state",
                    "type": "string",
                    "example": "credential_acked"
                },
                "thread_id": {
                    "description": "Thread identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "V10CredentialExchangeListResult": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "Aries#0036 v1.0 credential exchange records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V10CredentialExchange"
                    }
                }
            }
        },
        "V10CredentialFreeOfferRequest": {
            "required": [
                "connection_id",
                "cred_def_id",
                "credential_preview"
            ],
            "type": "object",
            "properties": {
                "auto_issue": {
                    "description": "Whether to respond automatically to credential requests, creating and issuing requested credentials",
                    "type": "boolean"
                },
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "credential_preview": {
                    "$ref": "#/definitions/CredentialPreview"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "auto_issue": true,
                "auto_remove": true,
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_preview": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                        {
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "value": "martini"
                        }
                    ]
                },
                "trace": true
            }
        },
        "V10CredentialIssueRequest": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "example": {
                "comment": "string"
            }
        },
        "V10CredentialProblemReportRequest": {
            "required": [
                "description"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            },
            "example": {
                "description": "string"
            }
        },
        "V10CredentialProposalRequestMand": {
            "required": [
                "connection_id",
                "credential_proposal"
            ],
            "type": "object",
            "properties": {
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "credential_proposal": {
                    "$ref": "#/definitions/CredentialPreview"
                },
                "issuer_did": {
                    "description": "Credential issuer DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "schema_issuer_did": {
                    "description": "Schema issuer DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_name": {
                    "description": "Schema name",
                    "type": "string",
                    "example": "preferences"
                },
                "schema_version": {
                    "description": "Schema version",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "auto_remove": true,
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_proposal": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                        {
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "value": "martini"
                        }
                    ]
                },
                "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                "schema_issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_name": "preferences",
                "schema_version": "1.0",
                "trace": true
            }
        },
        "V10CredentialProposalRequestOpt": {
            "required": [
                "connection_id"
            ],
            "type": "object",
            "properties": {
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "credential_proposal": {
                    "$ref": "#/definitions/CredentialPreview"
                },
                "issuer_did": {
                    "description": "Credential issuer DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "schema_issuer_did": {
                    "description": "Schema issuer DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_name": {
                    "description": "Schema name",
                    "type": "string",
                    "example": "preferences"
                },
                "schema_version": {
                    "description": "Schema version",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "auto_remove": true,
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_proposal": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                        {
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "value": "martini"
                        }
                    ]
                },
                "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                "schema_issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_name": "preferences",
                "schema_version": "1.0",
                "trace": true
            }
        },
        "V10CredentialStoreRequest": {
            "type": "object",
            "properties": {
                "credential_id": {
                    "type": "string"
                }
            },
            "example": {
                "credential_id": "string"
            }
        },
        "V10PresentProofModuleResponse": {
            "type": "object"
        },
        "V10PresentationCreateRequestRequest": {
            "required": [
                "proof_request"
            ],
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string",
                    "x-nullable": true
                },
                "proof_request": {
                    "$ref": "#/definitions/IndyProofRequest"
                },
                "trace": {
                    "description": "Whether to trace event (default false)",
                    "type": "boolean",
                    "example": false
                }
            },
            "example": {
                "comment": "string",
                "proof_request": {
                    "name": "Proof request",
                    "non_revoked": {},
                    "nonce": "1",
                    "requested_attributes": {},
                    "requested_predicates": {},
                    "version": "1.0"
                },
                "trace": false
            }
        },
        "V10PresentationExchange": {
            "type": "object",
            "properties": {
                "auto_present": {
                    "description": "Prover choice to auto-present proof as verifier requests",
                    "type": "boolean",
                    "example": false
                },
                "connection_id": {
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "error_msg": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Invalid structure"
                },
                "initiator": {
                    "description": "Present-proof exchange initiator: self or external",
                    "enum": [
                        "self",
                        "external"
                    ],
                    "type": "string",
                    "example": "self"
                },
                "presentation": {
                    "$ref": "#/definitions/V10PresentationExchange_presentation"
                },
                "presentation_exchange_id": {
                    "description": "Presentation exchange identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "presentation_proposal_dict": {
                    "$ref": "#/definitions/V10PresentationExchange_presentation_proposal_dict"
                },
                "presentation_request": {
                    "$ref": "#/definitions/V10PresentationExchange_presentation_request"
                },
                "presentation_request_dict": {
                    "$ref": "#/definitions/V10PresentationExchange_presentation_request_dict"
                },
                "role": {
                    "description": "Present-proof exchange role: prover or verifier",
                    "enum": [
                        "prover",
                        "verifier"
                    ],
                    "type": "string",
                    "example": "prover"
                },
                "state": {
                    "description": "Present-proof exchange state",
                    "type": "string",
                    "example": "verified"
                },
                "thread_id": {
                    "description": "Thread identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "verified": {
                    "description": "Whether presentation is verified: true or false",
                    "enum": [
                        "true",
                        "false"
                    ],
                    "type": "string",
                    "example": "true"
                }
            }
        },
        "V10PresentationExchangeList": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "Aries RFC 37 v1.0 presentation exchange records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V10PresentationExchange"
                    }
                }
            }
        },
        "V10PresentationProblemReportRequest": {
            "required": [
                "description"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            },
            "example": {
                "description": "string"
            }
        },
        "V10PresentationProposalRequest": {
            "required": [
                "connection_id",
                "presentation_proposal"
            ],
            "type": "object",
            "properties": {
                "auto_present": {
                    "description": "Whether to respond automatically to presentation requests, building and presenting requested proof",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "presentation_proposal": {
                    "$ref": "#/definitions/IndyPresPreview"
                },
                "trace": {
                    "description": "Whether to trace event (default false)",
                    "type": "boolean",
                    "example": false
                }
            },
            "example": {
                "auto_present": true,
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "presentation_proposal": {
                    "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation-preview",
                    "attributes": [
                        {
                            "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "referent": "0",
                            "value": "martini"
                        }
                    ],
                    "predicates": [
                        {
                            "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                            "name": "high_score",
                            "predicate": ">=",
                            "threshold": 0
                        }
                    ]
                },
                "trace": false
            }
        },
        "V10PresentationSendRequestRequest": {
            "required": [
                "connection_id",
                "proof_request"
            ],
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "proof_request": {
                    "$ref": "#/definitions/IndyProofRequest"
                },
                "trace": {
                    "description": "Whether to trace event (default false)",
                    "type": "boolean",
                    "example": false
                }
            },
            "example": {
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "proof_request": {
                    "name": "Proof request",
                    "non_revoked": {},
                    "nonce": "1",
                    "requested_attributes": {},
                    "requested_predicates": {},
                    "version": "1.0"
                },
                "trace": false
            }
        },
        "V20CredAttrSpec": {
            "required": [
                "name",
                "value"
            ],
            "type": "object",
            "properties": {
                "mime-type": {
                    "description": "MIME type: omit for (null) default",
                    "type": "string",
                    "example": "image/jpeg",
                    "x-nullable": true
                },
                "name": {
                    "description": "Attribute name",
                    "type": "string",
                    "example": "favourite_drink"
                },
                "value": {
                    "description": "Attribute value: base64-encode if MIME type is present",
                    "type": "string",
                    "example": "martini"
                }
            }
        },
        "V20CredBoundOfferRequest": {
            "type": "object",
            "properties": {
                "counter_preview": {
                    "$ref": "#/definitions/V20CredBoundOfferRequest_counter_preview"
                },
                "filter": {
                    "$ref": "#/definitions/V20CredBoundOfferRequest_filter"
                }
            },
            "example": {
                "counter_preview": {},
                "filter": {}
            }
        },
        "V20CredExFree": {
            "required": [
                "connection_id",
                "filter"
            ],
            "type": "object",
            "properties": {
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "credential_preview": {
                    "$ref": "#/definitions/V20CredPreview"
                },
                "filter": {
                    "$ref": "#/definitions/V20CredBoundOfferRequest_filter"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "auto_remove": true,
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "credential_preview": {
                    "@type": "issue-credential/2.0/credential-preview",
                    "attributes": [
                        {
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "value": "martini"
                        }
                    ]
                },
                "filter": {},
                "trace": true
            }
        },
        "V20CredExRecord": {
            "type": "object",
            "properties": {
                "auto_issue": {
                    "description": "Issuer choice to issue to request in this credential exchange",
                    "type": "boolean",
                    "example": false
                },
                "auto_offer": {
                    "description": "Holder choice to accept offer in this credential exchange",
                    "type": "boolean",
                    "example": false
                },
                "auto_remove": {
                    "description": "Issuer choice to remove this credential exchange record when complete",
                    "type": "boolean",
                    "example": false
                },
                "by_format": {
                    "$ref": "#/definitions/V20CredExRecord_by_format"
                },
                "connection_id": {
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "cred_ex_id": {
                    "description": "Credential exchange identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_issue": {
                    "$ref": "#/definitions/V20CredExRecord_cred_issue"
                },
                "cred_offer": {
                    "$ref": "#/definitions/V10CredentialExchange_credential_offer_dict"
                },
                "cred_preview": {
                    "$ref": "#/definitions/V20CredExRecord_cred_preview"
                },
                "cred_proposal": {
                    "$ref": "#/definitions/V10CredentialExchange_credential_proposal_dict"
                },
                "cred_request": {
                    "$ref": "#/definitions/V20CredExRecord_cred_request"
                },
                "error_msg": {
                    "description": "Error message",
                    "type": "string",
                    "example": "The front fell off"
                },
                "initiator": {
                    "description": "Issue-credential exchange initiator: self or external",
                    "enum": [
                        "self",
                        "external"
                    ],
                    "type": "string",
                    "example": "self"
                },
                "parent_thread_id": {
                    "description": "Parent thread identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "role": {
                    "description": "Issue-credential exchange role: holder or issuer",
                    "enum": [
                        "issuer",
                        "holder"
                    ],
                    "type": "string",
                    "example": "issuer"
                },
                "state": {
                    "description": "Issue-credential exchange state",
                    "enum": [
                        "proposal-sent",
                        "proposal-received",
                        "offer-sent",
                        "offer-received",
                        "request-sent",
                        "request-received",
                        "credential-issued",
                        "credential-received",
                        "done"
                    ],
                    "type": "string",
                    "example": "done"
                },
                "thread_id": {
                    "description": "Thread identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "V20CredExRecordByFormat": {
            "type": "object",
            "properties": {
                "cred_issue": {
                    "type": "object"
                },
                "cred_offer": {
                    "type": "object"
                },
                "cred_proposal": {
                    "type": "object"
                },
                "cred_request": {
                    "type": "object"
                }
            }
        },
        "V20CredExRecordDetail": {
            "type": "object",
            "properties": {
                "cred_ex_record": {
                    "$ref": "#/definitions/V20CredExRecordDetail_cred_ex_record"
                },
                "indy": {
                    "$ref": "#/definitions/V20CredExRecordIndy"
                },
                "ld_proof": {
                    "$ref": "#/definitions/V20CredExRecordLDProof"
                }
            }
        },
        "V20CredExRecordIndy": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "cred_ex_id": {
                    "description": "Corresponding v2.0 credential exchange record identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_ex_indy_id": {
                    "description": "Record identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_id_stored": {
                    "description": "Credential identifier stored in wallet",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_request_metadata": {
                    "description": "Credential request metadata for indy holder",
                    "type": "object"
                },
                "cred_rev_id": {
                    "description": "Credential revocation identifier within revocation registry",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "string",
                    "example": "12345"
                },
                "rev_reg_id": {
                    "description": "Revocation registry identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
                },
                "state": {
                    "description": "Current record state",
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "V20CredExRecordLDProof": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "cred_ex_id": {
                    "description": "Corresponding v2.0 credential exchange record identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_ex_ld_proof_id": {
                    "description": "Record identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "cred_id_stored": {
                    "description": "Credential identifier stored in wallet",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "state": {
                    "description": "Current record state",
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                }
            }
        },
        "V20CredExRecordListResult": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "Credential exchange records and corresponding detail records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20CredExRecordDetail"
                    }
                }
            }
        },
        "V20CredFilter": {
            "type": "object",
            "properties": {
                "indy": {
                    "$ref": "#/definitions/V20CredFilter_indy"
                },
                "ld_proof": {
                    "$ref": "#/definitions/V20CredFilter_ld_proof"
                }
            }
        },
        "V20CredFilterIndy": {
            "type": "object",
            "properties": {
                "cred_def_id": {
                    "description": "Credential definition identifier",
                    "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                },
                "issuer_did": {
                    "description": "Credential issuer DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_id": {
                    "description": "Schema identifier",
                    "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                },
                "schema_issuer_did": {
                    "description": "Schema issuer DID",
                    "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
                    "type": "string",
                    "example": "WgWxqztrNooG92RXvxSTWv"
                },
                "schema_name": {
                    "description": "Schema name",
                    "type": "string",
                    "example": "preferences"
                },
                "schema_version": {
                    "description": "Schema version",
                    "pattern": "^[0-9.]+$",
                    "type": "string",
                    "example": "1.0"
                }
            }
        },
        "V20CredFilterLDProof": {
            "required": [
                "ld_proof"
            ],
            "type": "object",
            "properties": {
                "ld_proof": {
                    "$ref": "#/definitions/V20CredFilter_ld_proof"
                }
            }
        },
        "V20CredFormat": {
            "required": [
                "attach_id",
                "format"
            ],
            "type": "object",
            "properties": {
                "attach_id": {
                    "description": "Attachment identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "format": {
                    "description": "Attachment format specifier",
                    "type": "string",
                    "example": "aries/ld-proof-vc-detail@v1.0"
                }
            }
        },
        "V20CredIssue": {
            "required": [
                "credentials~attach",
                "formats"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "credentials~attach": {
                    "description": "Credential attachments",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                },
                "formats": {
                    "description": "Acceptable attachment formats",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20CredFormat"
                    }
                },
                "replacement_id": {
                    "description": "Issuer-unique identifier to coordinate credential replacement",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
            }
        },
        "V20CredIssueProblemReportRequest": {
            "required": [
                "description"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            },
            "example": {
                "description": "string"
            }
        },
        "V20CredIssueRequest": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "example": {
                "comment": "string"
            }
        },
        "V20CredOffer": {
            "required": [
                "formats",
                "offers~attach"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "credential_preview": {
                    "$ref": "#/definitions/V20CredPreview"
                },
                "formats": {
                    "description": "Acceptable credential formats",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20CredFormat"
                    }
                },
                "offers~attach": {
                    "description": "Offer attachments",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                },
                "replacement_id": {
                    "description": "Issuer-unique identifier to coordinate credential replacement",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
            }
        },
        "V20CredOfferConnFreeRequest": {
            "required": [
                "filter"
            ],
            "type": "object",
            "properties": {
                "auto_issue": {
                    "description": "Whether to respond automatically to credential requests, creating and issuing requested credentials",
                    "type": "boolean"
                },
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "credential_preview": {
                    "$ref": "#/definitions/V20CredPreview"
                },
                "filter": {
                    "$ref": "#/definitions/V20CredBoundOfferRequest_filter"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "auto_issue": true,
                "auto_remove": true,
                "comment": "string",
                "credential_preview": {
                    "@type": "issue-credential/2.0/credential-preview",
                    "attributes": [
                        {
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "value": "martini"
                        }
                    ]
                },
                "filter": {},
                "trace": true
            }
        },
        "V20CredOfferRequest": {
            "required": [
                "connection_id",
                "filter"
            ],
            "type": "object",
            "properties": {
                "auto_issue": {
                    "description": "Whether to respond automatically to credential requests, creating and issuing requested credentials",
                    "type": "boolean"
                },
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "credential_preview": {
                    "$ref": "#/definitions/V20CredPreview"
                },
                "filter": {
                    "$ref": "#/definitions/V20CredBoundOfferRequest_filter"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "auto_issue": true,
                "auto_remove": true,
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "credential_preview": {
                    "@type": "issue-credential/2.0/credential-preview",
                    "attributes": [
                        {
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "value": "martini"
                        }
                    ]
                },
                "filter": {},
                "trace": true
            }
        },
        "V20CredPreview": {
            "required": [
                "attributes"
            ],
            "type": "object",
            "properties": {
                "@type": {
                    "description": "Message type identifier",
                    "type": "string",
                    "example": "issue-credential/2.0/credential-preview"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20CredAttrSpec"
                    }
                }
            }
        },
        "V20CredProposal": {
            "required": [
                "filters~attach",
                "formats"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "credential_preview": {
                    "$ref": "#/definitions/V20CredProposal_credential_preview"
                },
                "filters~attach": {
                    "description": "Credential filter per acceptable format on corresponding identifier",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                },
                "formats": {
                    "description": "Attachment formats",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20CredFormat"
                    }
                }
            }
        },
        "V20CredRequest": {
            "required": [
                "formats",
                "requests~attach"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "formats": {
                    "description": "Acceptable attachment formats",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20CredFormat"
                    }
                },
                "requests~attach": {
                    "description": "Request attachments",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                }
            }
        },
        "V20CredRequestFree": {
            "required": [
                "connection_id",
                "filter"
            ],
            "type": "object",
            "properties": {
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "filter": {
                    "$ref": "#/definitions/V20CredBoundOfferRequest_filter"
                },
                "holder_did": {
                    "description": "Holder DID to substitute for the credentialSubject.id",
                    "type": "string",
                    "example": "did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs",
                    "x-nullable": true
                },
                "trace": {
                    "description": "Whether to trace event (default false)",
                    "type": "boolean",
                    "example": false
                }
            },
            "example": {
                "auto_remove": true,
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "filter": {},
                "holder_did": "did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs",
                "trace": false
            }
        },
        "V20CredRequestRequest": {
            "type": "object",
            "properties": {
                "holder_did": {
                    "description": "Holder DID to substitute for the credentialSubject.id",
                    "type": "string",
                    "example": "did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs",
                    "x-nullable": true
                }
            },
            "example": {
                "holder_did": "did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs"
            }
        },
        "V20CredStoreRequest": {
            "type": "object",
            "properties": {
                "credential_id": {
                    "type": "string"
                }
            },
            "example": {
                "credential_id": "string"
            }
        },
        "V20IssueCredSchemaCore": {
            "required": [
                "filter"
            ],
            "type": "object",
            "properties": {
                "auto_remove": {
                    "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "credential_preview": {
                    "$ref": "#/definitions/V20CredPreview"
                },
                "filter": {
                    "$ref": "#/definitions/V20CredBoundOfferRequest_filter"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "auto_remove": true,
                "comment": "string",
                "credential_preview": {
                    "@type": "issue-credential/2.0/credential-preview",
                    "attributes": [
                        {
                            "mime-type": "image/jpeg",
                            "name": "favourite_drink",
                            "value": "martini"
                        }
                    ]
                },
                "filter": {},
                "trace": true
            }
        },
        "V20IssueCredentialModuleResponse": {
            "type": "object"
        },
        "V20Pres": {
            "required": [
                "formats",
                "presentations~attach"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "formats": {
                    "description": "Acceptable attachment formats",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20PresFormat"
                    }
                },
                "presentations~attach": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                }
            }
        },
        "V20PresCreateRequestRequest": {
            "required": [
                "presentation_request"
            ],
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string",
                    "x-nullable": true
                },
                "presentation_request": {
                    "$ref": "#/definitions/V20PresRequestByFormat"
                },
                "trace": {
                    "description": "Whether to trace event (default false)",
                    "type": "boolean",
                    "example": false
                }
            },
            "example": {
                "comment": "string",
                "presentation_request": {
                    "dif": {},
                    "indy": {}
                },
                "trace": false
            }
        },
        "V20PresExRecord": {
            "type": "object",
            "properties": {
                "auto_present": {
                    "description": "Prover choice to auto-present proof as verifier requests",
                    "type": "boolean",
                    "example": false
                },
                "by_format": {
                    "$ref": "#/definitions/V20PresExRecord_by_format"
                },
                "connection_id": {
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "error_msg": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Invalid structure"
                },
                "initiator": {
                    "description": "Present-proof exchange initiator: self or external",
                    "enum": [
                        "self",
                        "external"
                    ],
                    "type": "string",
                    "example": "self"
                },
                "pres": {
                    "$ref": "#/definitions/V20PresExRecord_pres"
                },
                "pres_ex_id": {
                    "description": "Presentation exchange identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "pres_proposal": {
                    "$ref": "#/definitions/V10PresentationExchange_presentation_proposal_dict"
                },
                "pres_request": {
                    "$ref": "#/definitions/V10PresentationExchange_presentation_request_dict"
                },
                "role": {
                    "description": "Present-proof exchange role: prover or verifier",
                    "enum": [
                        "prover",
                        "verifier"
                    ],
                    "type": "string",
                    "example": "prover"
                },
                "state": {
                    "description": "Present-proof exchange state",
                    "enum": [
                        "proposal-sent",
                        "proposal-received",
                        "request-sent",
                        "request-received",
                        "presentation-sent",
                        "presentation-received",
                        "done",
                        "abandoned"
                    ],
                    "type": "string"
                },
                "thread_id": {
                    "description": "Thread identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "verified": {
                    "description": "Whether presentation is verified: 'true' or 'false'",
                    "enum": [
                        "true",
                        "false"
                    ],
                    "type": "string",
                    "example": "true"
                }
            }
        },
        "V20PresExRecordByFormat": {
            "type": "object",
            "properties": {
                "pres": {
                    "type": "object"
                },
                "pres_proposal": {
                    "type": "object"
                },
                "pres_request": {
                    "type": "object"
                }
            }
        },
        "V20PresExRecordList": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "Presentation exchange records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20PresExRecord"
                    }
                }
            }
        },
        "V20PresFormat": {
            "required": [
                "attach_id",
                "format"
            ],
            "type": "object",
            "properties": {
                "attach_id": {
                    "description": "Attachment identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "format": {
                    "description": "Attachment format specifier",
                    "type": "string",
                    "example": "dif/presentation-exchange/submission@v1.0"
                }
            }
        },
        "V20PresProblemReportRequest": {
            "required": [
                "description"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            },
            "example": {
                "description": "string"
            }
        },
        "V20PresProposal": {
            "required": [
                "formats",
                "proposals~attach"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string"
                },
                "formats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20PresFormat"
                    }
                },
                "proposals~attach": {
                    "description": "Attachment per acceptable format on corresponding identifier",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                }
            }
        },
        "V20PresProposalByFormat": {
            "type": "object",
            "properties": {
                "dif": {
                    "$ref": "#/definitions/V20PresProposalByFormat_dif"
                },
                "indy": {
                    "$ref": "#/definitions/V20PresProposalByFormat_indy"
                }
            }
        },
        "V20PresProposalRequest": {
            "required": [
                "connection_id",
                "presentation_proposal"
            ],
            "type": "object",
            "properties": {
                "auto_present": {
                    "description": "Whether to respond automatically to presentation requests, building and presenting requested proof",
                    "type": "boolean"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "presentation_proposal": {
                    "$ref": "#/definitions/V20PresProposalByFormat"
                },
                "trace": {
                    "description": "Whether to trace event (default false)",
                    "type": "boolean",
                    "example": false
                }
            },
            "example": {
                "auto_present": true,
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "presentation_proposal": {
                    "dif": {},
                    "indy": {}
                },
                "trace": false
            }
        },
        "V20PresRequest": {
            "required": [
                "formats",
                "request_presentations~attach"
            ],
            "type": "object",
            "properties": {
                "@id": {
                    "description": "Message identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "@type": {
                    "description": "Message type",
                    "type": "string",
                    "readOnly": true,
                    "example": "https://didcomm.org/my-family/1.0/my-message-type"
                },
                "comment": {
                    "description": "Human-readable comment",
                    "type": "string"
                },
                "formats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V20PresFormat"
                    }
                },
                "request_presentations~attach": {
                    "description": "Attachment per acceptable format on corresponding identifier",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachDecorator"
                    }
                },
                "will_confirm": {
                    "description": "Whether verifier will send confirmation ack",
                    "type": "boolean"
                }
            }
        },
        "V20PresRequestByFormat": {
            "type": "object",
            "properties": {
                "dif": {
                    "$ref": "#/definitions/V20PresRequestByFormat_dif"
                },
                "indy": {
                    "$ref": "#/definitions/V20PresRequestByFormat_indy"
                }
            }
        },
        "V20PresSendRequestRequest": {
            "required": [
                "connection_id",
                "presentation_request"
            ],
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string",
                    "x-nullable": true
                },
                "connection_id": {
                    "format": "uuid",
                    "description": "Connection identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "presentation_request": {
                    "$ref": "#/definitions/V20PresRequestByFormat"
                },
                "trace": {
                    "description": "Whether to trace event (default false)",
                    "type": "boolean",
                    "example": false
                }
            },
            "example": {
                "comment": "string",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "presentation_request": {
                    "dif": {},
                    "indy": {}
                },
                "trace": false
            }
        },
        "V20PresSpecByFormatRequest": {
            "type": "object",
            "properties": {
                "dif": {
                    "$ref": "#/definitions/V20PresSpecByFormatRequest_dif"
                },
                "indy": {
                    "$ref": "#/definitions/V20PresSpecByFormatRequest_indy"
                },
                "trace": {
                    "description": "Record trace information, based on agent configuration",
                    "type": "boolean"
                }
            },
            "example": {
                "dif": {},
                "indy": {},
                "trace": true
            }
        },
        "V20PresentProofModuleResponse": {
            "type": "object"
        },
        "VCRecord": {
            "type": "object",
            "properties": {
                "contexts": {
                    "type": "array",
                    "items": {
                        "description": "Context",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                        "type": "string",
                        "example": "https://myhost:8021"
                    }
                },
                "cred_tags": {
                    "type": "object",
                    "additionalProperties": {
                        "description": "Retrieval tag value",
                        "type": "string"
                    }
                },
                "cred_value": {
                    "description": "(JSON-serializable) credential value",
                    "type": "object"
                },
                "expanded_types": {
                    "type": "array",
                    "items": {
                        "description": "JSON-LD expanded type extracted from type and context",
                        "type": "string",
                        "example": "https://w3id.org/citizenship#PermanentResidentCard"
                    }
                },
                "given_id": {
                    "description": "Credential identifier",
                    "type": "string",
                    "example": "http://example.edu/credentials/3732"
                },
                "issuer_id": {
                    "description": "Issuer identifier",
                    "type": "string",
                    "example": "https://example.edu/issuers/14"
                },
                "proof_types": {
                    "type": "array",
                    "items": {
                        "description": "Signature suite used for proof",
                        "type": "string",
                        "example": "Ed25519Signature2018"
                    }
                },
                "record_id": {
                    "description": "Record identifier",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                },
                "schema_ids": {
                    "type": "array",
                    "items": {
                        "description": "Schema identifier",
                        "type": "string",
                        "example": "https://example.org/examples/degree.json"
                    }
                },
                "subject_ids": {
                    "type": "array",
                    "items": {
                        "description": "Subject identifier",
                        "type": "string",
                        "example": "did:example:ebfeb1f712ebc6f1c276e12ec21"
                    }
                }
            }
        },
        "VCRecordList": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VCRecord"
                    }
                }
            }
        },
        "VerifyRequest": {
            "required": [
                "doc"
            ],
            "type": "object",
            "properties": {
                "doc": {
                    "$ref": "#/definitions/VerifyRequest_doc"
                },
                "verkey": {
                    "description": "Verkey to use for doc verification",
                    "type": "string"
                }
            },
            "example": {
                "doc": {},
                "verkey": "string"
            }
        },
        "VerifyResponse": {
            "required": [
                "valid"
            ],
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error text",
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "W3CCredentialsListRequest": {
            "type": "object",
            "properties": {
                "contexts": {
                    "type": "array",
                    "items": {
                        "description": "Credential context to match",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                        "type": "string",
                        "example": "https://myhost:8021"
                    }
                },
                "given_id": {
                    "description": "Given credential id to match",
                    "type": "string"
                },
                "issuer_id": {
                    "description": "Credential issuer identifier to match",
                    "type": "string"
                },
                "max_results": {
                    "format": "int32",
                    "description": "Maximum number of results to return",
                    "type": "integer"
                },
                "proof_types": {
                    "type": "array",
                    "items": {
                        "description": "Signature suite used for proof",
                        "type": "string",
                        "example": "Ed25519Signature2018"
                    }
                },
                "schema_ids": {
                    "description": "Schema identifiers, all of which to match",
                    "type": "array",
                    "items": {
                        "description": "Credential schema identifier",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                        "type": "string",
                        "example": "https://myhost:8021"
                    }
                },
                "subject_ids": {
                    "description": "Subject identifiers, all of which to match",
                    "type": "array",
                    "items": {
                        "description": "Subject identifier",
                        "type": "string"
                    }
                },
                "tag_query": {
                    "description": "Tag filter",
                    "type": "object",
                    "additionalProperties": {
                        "description": "Tag value",
                        "type": "string"
                    }
                },
                "types": {
                    "type": "array",
                    "items": {
                        "description": "Credential type to match",
                        "pattern": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
                        "type": "string",
                        "example": "https://myhost:8021"
                    }
                }
            },
            "example": {
                "contexts": [
                    "https://myhost:8021"
                ],
                "given_id": "string",
                "issuer_id": "string",
                "max_results": 0,
                "proof_types": [
                    "Ed25519Signature2018"
                ],
                "schema_ids": [
                    "https://myhost:8021"
                ],
                "subject_ids": [
                    "string"
                ],
                "tag_query": {},
                "types": [
                    "https://myhost:8021"
                ]
            }
        },
        "WalletList": {
            "type": "object",
            "properties": {
                "results": {
                    "description": "List of wallet records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WalletRecord"
                    }
                }
            }
        },
        "WalletModuleResponse": {
            "type": "object"
        },
        "WalletRecord": {
            "required": [
                "key_management_mode",
                "wallet_id"
            ],
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Time of record creation",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "key_management_mode": {
                    "description": "Mode regarding management of wallet key",
                    "enum": [
                        "managed",
                        "unmanaged"
                    ],
                    "type": "string"
                },
                "settings": {
                    "description": "Settings for this wallet.",
                    "type": "object"
                },
                "state": {
                    "description": "Current record state",
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "description": "Time of last record update",
                    "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
                    "type": "string",
                    "example": "2021-12-31 23:59:59Z"
                },
                "wallet_id": {
                    "description": "Wallet record ID",
                    "type": "string",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
            }
        },
        "ActionMenuFetchResult_result": {
            "description": "Action menu",
            "type": "object"
        },
        "AttachDecoratorData_jws": {
            "description": "Detached Java Web Signature",
            "type": "object"
        },
        "CredDefValue_primary": {
            "description": "Primary value for credential definition",
            "type": "object"
        },
        "CredDefValue_revocation": {
            "description": "Revocation value for credential definition",
            "type": "object"
        },
        "Credential_proof": {
            "description": "The proof of the credential",
            "type": "object",
            "example": "{\"created\":\"2019-12-11T03:50:55\",\"jws\":\"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0JiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQKBhQDxvXNo7nvtUBb_Eq1Ch6YBKY5qBQ\",\"proofPurpose\":\"assertionMethod\",\"type\":\"Ed25519Signature2018\",\"verificationMethod\":\"did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL\"}"
        },
        "CredentialDefinition_value": {
            "description": "Credential definition primary and revocation values",
            "type": "object"
        },
        "DIDCreate_options": {
            "description": "To define a key type for a did:key",
            "type": "object"
        },
        "DIDXRequest_did_docattach": {
            "description": "As signed attachment, DID Doc associated with DID",
            "type": "object"
        },
        "Doc_options": {
            "description": "Signature options",
            "type": "object"
        },
        "IndyCredAbstract_key_correctness_proof": {
            "description": "Key correctness proof",
            "type": "object"
        },
        "IndyCredPrecis_cred_info": {
            "description": "Credential info",
            "type": "object"
        },
        "IndyCredPrecis_interval": {
            "description": "Non-revocation interval from presentation request",
            "type": "object"
        },
        "IndyPrimaryProof_eq_proof": {
            "description": "Indy equality proof",
            "type": "object",
            "x-nullable": true
        },
        "IndyProof_proof": {
            "description": "Indy proof.proof content",
            "type": "object"
        },
        "IndyProof_requested_proof": {
            "description": "Indy proof.requested_proof content",
            "type": "object"
        },
        "IndyProofProof_aggregated_proof": {
            "description": "Indy proof aggregated proof",
            "type": "object"
        },
        "IndyProofProofProofsProof_non_revoc_proof": {
            "description": "Indy non-revocation proof",
            "type": "object",
            "x-nullable": true
        },
        "IndyProofProofProofsProof_primary_proof": {
            "description": "Indy primary proof",
            "type": "object"
        },
        "IndyProofReqAttrSpec_non_revoked": {
            "type": "object",
            "x-nullable": true
        },
        "IndyRevRegDef_value": {
            "description": "Revocation registry definition value",
            "type": "object"
        },
        "IndyRevRegDefValue_publicKeys": {
            "description": "Public keys",
            "type": "object"
        },
        "IndyRevRegEntry_value": {
            "description": "Revocation registry entry value",
            "type": "object"
        },
        "InvitationRecord_invitation": {
            "description": "Out of band invitation message",
            "type": "object"
        },
        "IssuerRevRegRecord_revoc_reg_def": {
            "description": "Revocation registry definition",
            "type": "object"
        },
        "IssuerRevRegRecord_revoc_reg_entry": {
            "description": "Revocation registry entry",
            "type": "object"
        },
        "KeylistQuery_paginate": {
            "description": "Pagination info",
            "type": "object"
        },
        "LDProofVCDetail_credential": {
            "description": "Detail of the JSON-LD Credential to be issued",
            "type": "object",
            "example": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/citizenship/v1\"],\"credentialSubject\":{\"familyName\":\"SMITH\",\"gender\":\"Male\",\"givenName\":\"JOHN\",\"type\":[\"PermanentResident\",\"Person\"]},\"description\":\"Government of Example Permanent Resident Card.\",\"identifier\":\"83627465\",\"issuanceDate\":\"2019-12-03T12:19:52Z\",\"issuer\":\"did:key:z6MkmjY8GnV5i9YTDtPETC2uUAW6ejw3nk5mXF5yci5ab7th\",\"name\":\"Permanent Resident Card\",\"type\":[\"VerifiableCredential\",\"PermanentResidentCard\"]}"
        },
        "LDProofVCDetail_options": {
            "description": "Options for specifying how the linked data proof is created.",
            "type": "object",
            "example": "{\"proofType\":\"Ed25519Signature2018\"}"
        },
        "LDProofVCDetailOptions_credentialStatus": {
            "description": "The credential status mechanism to use for the credential. Omitting the property indicates the issued credential will not include a credential status",
            "type": "object"
        },
        "SchemaSendResult_schema": {
            "description": "Schema definition",
            "type": "object"
        },
        "SendMenu_menu": {
            "description": "Menu to send to connection",
            "type": "object"
        },
        "SignedDoc_proof": {
            "description": "Linked data proof",
            "type": "object"
        },
        "TxnOrCredentialDefinitionSendResult_txn": {
            "description": "Credential definition transaction to endorse",
            "type": "object"
        },
        "TxnOrPublishRevocationsResult_txn": {
            "description": "Revocation registry revocations transaction to endorse",
            "type": "object"
        },
        "TxnOrRevRegResult_txn": {
            "description": "Revocation registry definition transaction to endorse",
            "type": "object"
        },
        "TxnOrSchemaSendResult_sent": {
            "description": "Content sent",
            "type": "object"
        },
        "TxnOrSchemaSendResult_txn": {
            "description": "Schema transaction to endorse",
            "type": "object"
        },
        "V10CredentialBoundOfferRequest_counter_proposal": {
            "description": "Optional counter-proposal",
            "type": "object"
        },
        "V10CredentialExchange_credential": {
            "description": "Credential as stored",
            "type": "object"
        },
        "V10CredentialExchange_credential_offer": {
            "description": "(Indy) credential offer",
            "type": "object"
        },
        "V10CredentialExchange_credential_offer_dict": {
            "description": "Credential offer message",
            "type": "object"
        },
        "V10CredentialExchange_credential_proposal_dict": {
            "description": "Credential proposal message",
            "type": "object"
        },
        "V10CredentialExchange_credential_request": {
            "description": "(Indy) credential request",
            "type": "object"
        },
        "V10CredentialExchange_raw_credential": {
            "description": "Credential as received, prior to storage in holder wallet",
            "type": "object"
        },
        "V10PresentationExchange_presentation": {
            "description": "(Indy) presentation (also known as proof)",
            "type": "object"
        },
        "V10PresentationExchange_presentation_proposal_dict": {
            "description": "Presentation proposal message",
            "type": "object"
        },
        "V10PresentationExchange_presentation_request": {
            "description": "(Indy) presentation request (also known as proof request)",
            "type": "object"
        },
        "V10PresentationExchange_presentation_request_dict": {
            "description": "Presentation request message",
            "type": "object"
        },
        "V20CredBoundOfferRequest_counter_preview": {
            "description": "Optional content for counter-proposal",
            "type": "object"
        },
        "V20CredBoundOfferRequest_filter": {
            "description": "Credential specification criteria by format",
            "type": "object"
        },
        "V20CredExRecord_by_format": {
            "description": "Attachment content by format for proposal, offer, request, and issue",
            "type": "object"
        },
        "V20CredExRecord_cred_issue": {
            "description": "Serialized credential issue message",
            "type": "object"
        },
        "V20CredExRecord_cred_preview": {
            "description": "Credential preview from credential proposal",
            "type": "object"
        },
        "V20CredExRecord_cred_request": {
            "description": "Serialized credential request message",
            "type": "object"
        },
        "V20CredExRecordDetail_cred_ex_record": {
            "description": "Credential exchange record",
            "type": "object"
        },
        "V20CredFilter_indy": {
            "description": "Credential filter for indy",
            "type": "object"
        },
        "V20CredFilter_ld_proof": {
            "description": "Credential filter for linked data proof",
            "type": "object"
        },
        "V20CredProposal_credential_preview": {
            "description": "Credential preview",
            "type": "object"
        },
        "V20PresExRecord_by_format": {
            "description": "Attachment content by format for proposal, request, and presentation",
            "type": "object"
        },
        "V20PresExRecord_pres": {
            "description": "Presentation message",
            "type": "object"
        },
        "V20PresProposalByFormat_dif": {
            "description": "Presentation proposal for DIF",
            "type": "object"
        },
        "V20PresProposalByFormat_indy": {
            "description": "Presentation proposal for indy",
            "type": "object"
        },
        "V20PresRequestByFormat_dif": {
            "description": "Presentation request for DIF",
            "type": "object"
        },
        "V20PresRequestByFormat_indy": {
            "description": "Presentation request for indy",
            "type": "object"
        },
        "V20PresSpecByFormatRequest_dif": {
            "description": "Optional Presentation specification for DIF, overrides the PresentionExchange record's PresRequest",
            "type": "object"
        },
        "V20PresSpecByFormatRequest_indy": {
            "description": "Presentation specification for indy",
            "type": "object"
        },
        "VerifyRequest_doc": {
            "description": "Signed document",
            "type": "object"
        }
    },
    "tags": [
        {
            "name": "action-menu",
            "description": "Menu interaction over connection"
        },
        {
            "name": "basicmessage",
            "description": "Simple messaging",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/527849ec3aa2a8fd47a7bb6c57f918ff8bcb5e8c/features/0095-basic-message",
                "description": "Specification"
            }
        },
        {
            "name": "connection",
            "description": "Connection management",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/9b0aaa39df7e8bd434126c4b33c097aae78d65bf/features/0160-connection-protocol",
                "description": "Specification"
            }
        },
        {
            "name": "credential-definition",
            "description": "Credential definition operations",
            "externalDocs": {
                "url": "https://github.com/hyperledger/indy-node/blob/master/design/anoncreds.md#cred_def",
                "description": "Specification"
            }
        },
        {
            "name": "credentials",
            "description": "Holder credential management",
            "externalDocs": {
                "url": "https://w3c.github.io/vc-data-model/#credentials",
                "description": "Overview"
            }
        },
        {
            "name": "did-exchange",
            "description": "Connection management via DID exchange",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/25464a5c8f8a17b14edaa4310393df6094ace7b0/features/0023-did-exchange",
                "description": "Specification"
            }
        },
        {
            "name": "endorse-transaction",
            "description": "Endorse a Transaction"
        },
        {
            "name": "introduction",
            "description": "Introduction of known parties"
        },
        {
            "name": "issue-credential v1.0",
            "description": "Credential issue v1.0",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/bb42a6c35e0d5543718fb36dd099551ab192f7b0/features/0036-issue-credential",
                "description": "Specification"
            }
        },
        {
            "name": "issue-credential v2.0",
            "description": "Credential issue v2.0",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/cd27fc64aa2805f756a118043d7c880354353047/features/0453-issue-credential-v2",
                "description": "Specification"
            }
        },
        {
            "name": "jsonld",
            "description": "Sign and verify json-ld data",
            "externalDocs": {
                "url": "https://tools.ietf.org/html/rfc7515",
                "description": "Specification"
            }
        },
        {
            "name": "ledger",
            "description": "Interaction with ledger",
            "externalDocs": {
                "url": "https://hyperledger-indy.readthedocs.io/projects/plenum/en/latest/storage.html#ledger",
                "description": "Overview"
            }
        },
        {
            "name": "mediation",
            "description": "Mediation management",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/fa8dc4ea1e667eb07db8f9ffeaf074a4455697c0/features/0211-route-coordination",
                "description": "Specification"
            }
        },
        {
            "name": "multitenancy",
            "description": "Multitenant wallet management"
        },
        {
            "name": "out-of-band",
            "description": "Out-of-band connections",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/2da7fc4ee043effa3a9960150e7ba8c9a4628b68/features/0434-outofband",
                "description": "Design"
            }
        },
        {
            "name": "present-proof v1.0",
            "description": "Proof presentation v1.0",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/4fae574c03f9f1013db30bf2c0c676b1122f7149/features/0037-present-proof",
                "description": "Specification"
            }
        },
        {
            "name": "present-proof v2.0",
            "description": "Proof presentation v2.0",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/eace815c3e8598d4a8dd7881d8c731fdb2bcc0aa/features/0454-present-proof-v2",
                "description": "Specification"
            }
        },
        {
            "name": "resolver",
            "description": "DID resolver interface",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/fa4b1947c6077168d2c69f45ed6bee2bb1eae4c8/features/0124-did-resolution-protocol",
                "description": "Specification"
            }
        },
        {
            "name": "revocation",
            "description": "Revocation registry management",
            "externalDocs": {
                "url": "https://github.com/hyperledger/indy-hipe/tree/master/text/0011-cred-revocation",
                "description": "Overview"
            }
        },
        {
            "name": "schema",
            "description": "Schema operations",
            "externalDocs": {
                "url": "https://github.com/hyperledger/indy-node/blob/master/design/anoncreds.md#schema",
                "description": "Specification"
            }
        },
        {
            "name": "server",
            "description": "Feature discovery",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/9b7ab9814f2e7d1108f74aca6f3d2e5d62899473/features/0031-discover-features",
                "description": "Specification"
            }
        },
        {
            "name": "trustping",
            "description": "Trust-ping over connection",
            "externalDocs": {
                "url": "https://github.com/hyperledger/aries-rfcs/tree/527849ec3aa2a8fd47a7bb6c57f918ff8bcb5e8c/features/0048-trust-ping",
                "description": "Specification"
            }
        },
        {
            "name": "wallet",
            "description": "DID and tag policy management",
            "externalDocs": {
                "url": "https://github.com/hyperledger/indy-sdk/tree/master/docs/design/003-wallet-storage",
                "description": "Design"
            }
        }
    ]
}